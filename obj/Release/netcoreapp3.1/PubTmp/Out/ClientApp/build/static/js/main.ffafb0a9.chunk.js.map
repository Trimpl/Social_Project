{"version":3,"sources":["components/api-authorization/ApiAuthorizationConstants.ts","components/api-authorization/AuthorizeService.ts","store/api-auth/LoginForm.tsx","store/Profile/ProfileStore.tsx","store/Profile/EditProfileStore.ts","store/Friends/FriendsStore.ts","store/Dialogs/DialogStore.ts","store/Posts/PostsStore.ts","store/PhotoAlbum/PhotoAlbumStore.ts","store/Groups/GroupStore.ts","store/Notifications/Notifications.ts","store/MessageNotifications/MesNotifcationsStore.ts","store/index.ts","store/signalr/signal.ts","components/MessageNotifications/MesNotifications.tsx","components/Notifications/Notifications.tsx","components/api-authorization/LoginMenu.tsx","components/NavMenu.tsx","components/Layout.tsx","components/Comments/CreateComment.tsx","components/Comments/ListOfComments.tsx","components/Images/Image.tsx","components/Posts/LikeBtn.tsx","components/Posts/ListOfPosts.tsx","components/Home.tsx","components/api-authorization/AuthorizeRoute.tsx","components/api-authorization/Login.tsx","components/api-authorization/Logout.tsx","components/api-authorization/ApiAuthorizationRoutes.tsx","components/api-auth/LoginForm.tsx","components/NotFound.tsx","components/api-auth/RegisterForm.tsx","components/api-auth/ConfirmEmail.tsx","components/Profile/FileInput.tsx","components/Posts/CreatePost.tsx","components/PhotoAlbum/PhotoAlbum.tsx","components/Profile/ListOfSubs.tsx","components/Profile/Profile.tsx","components/Profile/EditProfile.tsx","components/Friends/PanelOfFriend.tsx","components/Friends/Friends.tsx","components/Chat/Dialog.tsx","components/Chat/Dialogs.tsx","components/Groups/CreateGroup.tsx","components/Groups/ListOfSubscribers.tsx","components/Groups/Subscribe.tsx","components/Groups/GetGroup.tsx","components/Groups/ListOfGroups.tsx","App.tsx","index.tsx","store/configureStore.ts"],"names":["QueryParameterNames","LogoutActions","LoginActions","prefix","location","window","href","includes","ApplicationPaths","DefaultLoginRedirectPath","ApiAuthorizationClientConfigurationUrl","ApiAuthorizationPrefix","Login","LoginFailed","LoginCallback","Register","Profile","LogOut","LoggedOut","LogOutCallback","IdentityRegisterPath","IdentityManagePath","authService","userManager","_callbacks","_nextSubscriptionId","_user","_isAuthenticated","_popUpDisabled","this","getUser","user","profile","ensureUserManagerInitialized","access_token","state","console","log","signinSilentCallback","catch","error","createArguments","then","signinSilent","silentUser","updateState","success","Error","signinPopup","popUpUser","message","signinRedirect","redirect","url","signinCallback","undefined","signoutPopup","signoutRedirect","signoutCallback","response","data","notifySubscribers","callback","push","subscription","subscriptionId","subscriptionIndex","map","element","index","found","filter","length","splice","i","useReplaceToNavigate","status","AuthenticationResultStatus","Fail","Success","Redirect","fetch","ok","json","settings","automaticSilentRenew","includeIdTokenInSilentRenew","userStore","WebStorageStateStore","UserManager","events","addUserSignedOut","a","removeUser","actionCreators","request","Email","Password","RememberMe","Controller","dispatch","getState","appState","formData","FormData","append","toString","loginForm","type","method","body","receive","relocate","signIn","returnUrl","replace","unloadedState","isLoading","requestProfile","userId","getAccessToken","token","headers","requestFriends","id","listOfFriends","getEditProfile","postEditProfile","firstName","secondName","country","city","languages","dateOfBirth","familyStatus","avatar","Date","isAuthor","listOfNotFriends","requestNotFriends","requestDialog","toUserId","sub","messages","withWhomId","sendMessage","Promise","all","to","recieveMessage","dialog","sendPost","postText","pictureLink","groupId","requestPosts","posts","group","isAuthenticated","valueOf","getLike","postId","likes","sendLike","sendComment","text","recievedSuccess","requestAlbum","pictures","addToAlbum","JSON","stringify","albumId","object","getGroup","isAdmin","getListOfSubscribers","users","admins","name","description","avatarLink","notifications","removeNotifications","ids","deleteNotification","setTimeout","reducers","incomingAction","action","className","role","editProfile","friends","firstId","secondId","createPost","newLike","countsOfLikes","isLiked","newComment","comments","post","photoAlbum","notification","mesNotifications","pathname","connection","signalR","withUrl","accessTokenFactory","getToken","configureLogging","None","build","signalRRegisterCommands","store","start","on","document","getElementById","textContent","innerHTML","onclose","ping","next","invoke","MesNotifications","props","key","src","alt","width","height","firstUserId","React","connect","MesNotificationsStore","Notifications","count","ensureDataFetched","setState","data-toggle","aria-haspopup","aria-expanded","onClick","remove","icon","faBell","aria-labelledby","b","image","NotificationStore","LoginMenu","_subscription","userName","subscribe","populateState","unsubscribe","profilePath","logoutPath","local","authenticatedView","registerPath","loginPath","anonymousView","NavItem","NavLink","tag","Link","faNewspaper","faUsers","faCommentAlt","faComments","faUser","faSignOutAlt","Component","NavMenu","isOpen","toggle","Navbar","Container","NavbarBrand","NavbarToggler","Collapse","navbar","style","marginTop","children","CreateComment","commentText","handleInputChange","bind","event","target","value","placeholder","required","onChange","renderCreatePost","ListOfComments","elementClass","showAll","date","postDate","createDate","toLocaleDateString","toLocaleTimeString","link","renderText","Img","background","closeModalPicture","renderModalPicture","LikeBtn","e","checked","change","htmlFor","viewBox","xmlns","fill","fillRule","transform","d","opacity","cx","cy","r","ListOfPosts","picture","renderPosts","CreatePostStore","Home","AuthorizeRoute","ready","authenticated","authenticationChanged","populateAuthenticationState","createElement","path","protocol","host","search","hash","component","rest","render","login","getReturnUrl","processLoginCallback","URLSearchParams","get","redirectToProfile","redirectToRegister","result","navigateToReturnUrl","completeSignIn","fromQuery","startsWith","origin","redirectToApiAuthorizationPath","encodeURI","apiAuthorizationPath","redirectUrl","Logout","isReady","history","logout","processLogoutCallback","signOut","completeSignOut","ApiAuthorizationRoutes","loginAction","logoutAction","LoginForm","handleSubmit","preventDefault","handleChangeEmail","handleChangePassword","PureComponent","LoginFormState","NotFound","RegisterForm","ConfirmPassword","handleChangeConfirmPassword","ConfirmEmailSuccess","BadConfirmEmail","FileInput","fileInput","onImageChange","upload","current","files","file","match","fd","xhr","XMLHttpRequest","open","setRequestHeader","that","onload","parse","responseText","$","empty","send","ref","faFileImage","renderInput","CreatePost","handleInputFileChange","prevState","PhotoAlbum","pictureLinks","renderAlbum","renderStateAlbum","PhotoAlbumStore","ListOfFriends","listOfFrfiends","params","toUTCString","renderUser","ProfileStore","EditProfile","values","getDate","getMonth","pattern","getFullYear","EditProfileStore","PanelOfFriend","isFriend","addDeleteFriend","friend","renderButton","Friends","renderListOfFriends","renderListOfNotFriends","FriendsStore","Dialog","componentDidMount","scrollTo","querySelector","scrollHeight","onLoad","bg","isViewed","DialogStore","Dialogs","dialogs","renderDialogs","CreateGroupe","editGroup","renderForm","GroupStore","ListOfSubscribers","renderMakeAdminBtn","renderAdminList","renderUserList","Subscribe","subscribed","GetGroup","renderAuthView","renderAdminView","renderGroup","ListOfGroups","subGroups","notSubGroups","listOfSubGroups","listOfNotSubGroups","renderGroups","Layout","exact","CreateGroup","baseUrl","getElementsByTagName","getAttribute","createBrowserHistory","basename","initialState","middleware","thunk","routerMiddleware","rootReducer","combineReducers","router","connectRouter","enhancers","windowIfDefined","__REDUX_DEVTOOLS_EXTENSION__","createStore","compose","applyMiddleware","configureStore","auth","ReactDOM","App"],"mappings":"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","file":"static/js/main.ffafb0a9.chunk.js","sourcesContent":["export const ApplicationName = 'WebApplication1';\n\nexport const QueryParameterNames = {\n  ReturnUrl: 'returnUrl',\n  Message: 'message'\n};\n\nexport const LogoutActions = {\n  LogoutCallback: 'logout-callback',\n  Logout: 'logout',\n  LoggedOut: 'logged-out'\n};\n\nexport const LoginActions = {\n  Login: 'login',\n  LoginCallback: 'login-callback',\n  LoginFailed: 'login-failed',\n  Profile: 'profile',\n  Register: 'register'\n};\n\nvar prefix = '/authentication';\nvar location : string = '';\nif (window.location.href.includes('plesk-site-preview/socialnetwork.of.by')) prefix = 'authentication'\nif (window.location.href.includes('plesk-site-preview/socialnetwork.of.by'))  location = '/plesk-site-preview/socialnetwork.of.by'\nexport const ApplicationPaths = {\n  DefaultLoginRedirectPath: '/',\n  ApiAuthorizationClientConfigurationUrl: `${location}/_configuration/${ApplicationName}`,\n  ApiAuthorizationPrefix: prefix,\n  Login: `${prefix}/${LoginActions.Login}`,\n  LoginFailed: `${prefix}/${LoginActions.LoginFailed}`,\n  LoginCallback: `${prefix}/${LoginActions.LoginCallback}`,\n  Register: `${prefix}/${LoginActions.Register}`,\n  Profile: `${prefix}/${LoginActions.Profile}`,\n  LogOut: `${prefix}/${LogoutActions.Logout}`,\n  LoggedOut: `${prefix}/${LogoutActions.LoggedOut}`,\n  LogOutCallback: `${prefix}/${LogoutActions.LogoutCallback}`,\n  IdentityRegisterPath: '/Identity/Account/Register',\n  IdentityManagePath: '/Identity/Account/Manage'\n};\n","import { UserManager, WebStorageStateStore } from 'oidc-client';\nimport { ApplicationPaths, ApplicationName } from './ApiAuthorizationConstants';\n\nexport class AuthorizeService {\n    userManager!: UserManager;\n    _callbacks: any = [];\n    _nextSubscriptionId = 0;\n    _user: any = null;\n    _isAuthenticated = false;\n\n    // By default pop ups are disabled because they don't work properly on Edge.\n    // If you want to enable pop up authentication simply set this flag to false.\n    _popUpDisabled = true;\n\n    async isAuthenticated() {\n        const user = await this.getUser();\n        return !!user;\n    }\n\n    async getUser() {\n        if (this._user && this._user.profile) {\n            return this._user.profile;\n        }\n\n        await this.ensureUserManagerInitialized();\n        const user = await this.userManager.getUser();\n        return user && user.profile;\n    }\n\n    async getAccessToken() {\n        await this.ensureUserManagerInitialized();\n        const user = await this.userManager.getUser();\n        return user && user.access_token;\n    }\n\n    async signIn(state: any) {\n        await this.ensureUserManagerInitialized();\n        try {\n            console.log('ТИХАЯ АВТОРИЗАЦИЯ1')\n            await this.userManager.signinSilentCallback().catch(error => console.log(error))\n            // const silentUser = await this.userManager.signinRedirect(this.createArguments(null))\n            console.log('CREATE_ARGS: ', this.createArguments(null))\n            this.userManager.getUser().then(user => {\n                this._user = user;\n            });\n            const silentUser = await this.userManager.signinSilent(this.createArguments(null))\n            console.log('ТИХАЯ АВТОРИЗАЦИЯ2')\n            this.updateState(silentUser);\n            console.log('ТИХАЯ АВТОРИЗАЦИЯ3')\n            return this.success(state);\n        } catch (silentError) {\n            console.log(silentError)\n            try {\n                if (this._popUpDisabled) {\n                    throw new Error('Popup disabled. Change \\'AuthorizeService.js:AuthorizeService._popupDisabled\\' to false to enable it.')\n                }\n                console.log('POPUP')\n                const popUpUser = await this.userManager.signinPopup(this.createArguments(null));\n                this.updateState(popUpUser);\n                return this.success(state);\n            } catch (popUpError) {\n                console.log(popUpError)\n                if (popUpError.message === \"Popup window closed\") {\n                    // The user explicitly cancelled the login action by closing an opened popup.\n                    return this.error(\"The user closed the window.\");\n                } else if (!this._popUpDisabled) {\n                    console.log(\"Popup authentication error: \", popUpError);\n                }\n\n                // PopUps might be blocked by the user, fallback to redirect\n                try {\n                    await this.userManager.signinRedirect(this.createArguments(null));\n                    return this.redirect();\n                } catch (redirectError) {\n                    console.log(\"Redirect authentication error: \", redirectError);\n                    return this.error(redirectError);\n                }\n            }\n        }\n    }\n\n    async completeSignIn(url: string) {\n        try {\n            await this.ensureUserManagerInitialized();\n            const user = await this.userManager.signinCallback(undefined);\n            this.updateState(user);\n            return this.success(user && user.state);\n        } catch (error) {\n            console.log('There was an error signing in: ', error);\n            return this.error('There was an error signing in.');\n        }\n    }\n\n    // We try to sign out the user in two different ways:\n    // 1) We try to do a sign-out using a PopUp Window. This might fail if there is a\n    //    Pop-Up blocker or the user has disabled PopUps.\n    // 2) If the method above fails, we redirect the browser to the IdP to perform a traditional\n    //    post logout redirect flow.\n    async signOut(state: any) {\n        await this.ensureUserManagerInitialized();\n        try {\n            if (this._popUpDisabled) {\n                throw new Error('Popup disabled. Change \\'AuthorizeService.js:AuthorizeService._popupDisabled\\' to false to enable it.')\n            }\n            await this.userManager.signoutPopup(this.createArguments(undefined));\n            this.updateState(undefined);\n            return this.success(state);\n        } catch (popupSignOutError) {\n            console.log(\"Popup signout error: \", popupSignOutError);\n            try {\n                await this.userManager.signoutRedirect(this.createArguments(state));\n                return this.redirect();\n            } catch (redirectSignOutError) {\n                console.log(\"Redirect signout error: \", redirectSignOutError);\n                return this.error(redirectSignOutError);\n            }\n        }\n    }\n\n    async completeSignOut(url: string) {\n        await this.ensureUserManagerInitialized();\n        try {\n            const response = await this.userManager.signoutCallback(url) as any;\n            this.updateState(null);\n            return this.success(response && response.data);\n        } catch (error) {\n            console.log(`There was an error trying to log out '${error}'.`);\n            return this.error(error);\n        }\n    }\n\n    updateState(user: any) {\n        this._user = user;\n        this._isAuthenticated = !!this._user;\n        this.notifySubscribers();\n    }\n\n    subscribe(callback: any) {\n        this._callbacks.push({ callback, subscription: this._nextSubscriptionId++ });\n        return this._nextSubscriptionId - 1;\n    }\n\n    unsubscribe(subscriptionId: any) {\n        const subscriptionIndex = this._callbacks\n            .map((element: { subscription: any; }, index: any) => element.subscription === subscriptionId ? { found: true, index } : { found: false })\n            .filter((element: { found: boolean; }) => element.found === true);\n        if (subscriptionIndex.length !== 1) {\n            throw new Error(`Found an invalid number of subscriptions ${subscriptionIndex.length}`);\n        }\n\n        this._callbacks.splice(subscriptionIndex[0].index, 1);\n    }\n\n    notifySubscribers() {\n        for (let i = 0; i < this._callbacks.length; i++) {\n            const callback = this._callbacks[i].callback;\n            callback();\n        }\n    }\n\n    createArguments(state: any) {\n        return { useReplaceToNavigate: true, data: state };\n    }\n\n    error(message: any) {\n        return { status: AuthenticationResultStatus.Fail, message };\n    }\n\n    success(state: any) {\n        return { status: AuthenticationResultStatus.Success, state };\n    }\n\n    redirect() {\n        return { status: AuthenticationResultStatus.Redirect };\n    }\n\n    async ensureUserManagerInitialized() {\n        if (this.userManager !== undefined) {\n            return;\n        }\n\n        let response = await fetch(ApplicationPaths.ApiAuthorizationClientConfigurationUrl);\n        if (!response.ok) {\n            throw new Error(`Could not load settings for '${ApplicationName}'`);\n        }\n        let settings = await response.json();\n        settings.automaticSilentRenew = true;\n        settings.includeIdTokenInSilentRenew = true;\n        settings.userStore = new WebStorageStateStore({\n            prefix: ApplicationName\n        });\n        this.userManager = new UserManager(settings);\n\n        this.userManager.events.addUserSignedOut(async () => {\n            await this.userManager.removeUser();\n            this.updateState(undefined);\n        });\n    }\n\n    static get instance() { return authService }\n}\n\nconst authService = new AuthorizeService();\n\nexport default authService;\n\nexport const AuthenticationResultStatus = {\n    Redirect: 'redirect',\n    Success: 'success',\n    Fail: 'fail'\n};\n","import { Action, Reducer } from 'redux';\nimport { AppThunkAction } from '..';\nimport authService from '../../components/api-authorization/AuthorizeService';\nimport * as React from 'react';\n\nexport interface LoginFormState {\n    isLoading: JSX.Element;\n    status: string;\n    relocate: boolean\n}\n\nexport interface Form {\n    Email: string,\n    Password: string,\n    RememberMe: boolean\n}\n\ninterface Request {\n    type: 'REQUEST';\n}\n\ninterface Receive {\n    type: 'RECEIVE';\n    receive: string;\n    relocate: boolean\n}\n\ntype KnownAction = Request | Receive;\n\nexport const actionCreators = {\n    request: (Email: string, Password: string, RememberMe: boolean, Controller: string): AppThunkAction<KnownAction> => async (dispatch, getState) => {\n        const appState = getState()\n        const formData = new FormData()\n        formData.append('Input.Email', Email)\n        formData.append('Input.Password', Password)\n        formData.append('Input.RememberMe', RememberMe.toString())\n        if (appState && appState.loginForm) {\n            dispatch({ type: 'REQUEST' })\n            fetch(Controller, {\n                method: 'POST',\n                body: formData\n            })\n                .then(async data => {\n                    if (data.ok) {\n                        dispatch({ type: 'RECEIVE', receive: 'You successfully logged in', relocate: true });\n                        const returnUrl = \"http://93.125.99.108/plesk-site-preview/socialnetwork.of.by/\"\n                        await authService.signIn({ returnUrl })\n                        window.location.replace(\"http://93.125.99.108/plesk-site-preview/socialnetwork.of.by/\");\n                    }\n                    else {\n                        dispatch({ type: 'RECEIVE', receive: \"Oops, that's not a match. Try again?\", relocate: false });\n                    }\n                })\n                .catch(data => console.log(data))\n        }\n    }\n};\n\nconst unloadedState: LoginFormState = { isLoading: <div></div>, status: '', relocate: false };\n\nexport const reducer: Reducer<LoginFormState> = (state: LoginFormState | undefined, incomingAction: Action): LoginFormState => {\n    if (state === undefined) {\n        return unloadedState;\n    }\n\n    const action = incomingAction as KnownAction;\n    switch (action.type) {\n        case 'REQUEST':\n            return {\n                status: '',\n                isLoading: <div className=\"spinner-border text-primary\" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                </div>,\n                relocate: false\n            };\n        case 'RECEIVE':\n            return {\n                status: action.receive,\n                isLoading: <div></div>,\n                relocate: action.relocate\n            }\n        default:\n            return state\n    }\n}","import { Action, Reducer } from 'redux';\nimport { AppThunkAction } from '..';\nimport authService from '../../components/api-authorization/AuthorizeService';\nimport * as React from 'react';\nimport { Friend } from '../Friends/FriendsStore';\n\nexport interface ProfileState {\n    isLoading: JSX.Element\n    user: UserModel | null\n    listOfFriends: Friend[]\n}\nexport interface User {\n    id: string;\n    firstName: string;\n    secondName: string;\n    familyStatus: string;\n    dateOfBirth: Date;\n    country: string;\n    city: string;\n    languages: string;\n    avatar: string\n}\nexport interface UserModel extends User {\n    isAuthor: boolean\n}\ninterface Request {\n    type: 'REQUEST';\n}\ninterface ReceiveFriends {\n    type: 'RECEIVE_LIST_OF_FRIENDS';\n    listOfFriends: Friend[]\n}\ninterface Receive {\n    type: 'RECEIVE';\n    user: UserModel | null\n}\ntype KnownAction = Request | Receive | ReceiveFriends;\n\nexport const actionCreators = {\n    requestProfile: (userId: string): AppThunkAction<KnownAction> => async (dispatch, getState) => {\n        const token = await authService.getAccessToken();\n        fetch(`api/Profile?userId=${userId}`, {\n            headers: !token ? {} : { 'Authorization': `Bearer ${token}` }\n        })\n            .then(response => {\n                return response.ok ? response.json() as Promise<UserModel> : null\n            })\n            .then(data => {\n                dispatch({ type: 'RECEIVE', user: data })\n            });\n        dispatch({ type: 'REQUEST' });\n    },\n    requestFriends: (id: string): AppThunkAction<KnownAction> => async (dispatch, getState) => {\n        dispatch({ type: 'REQUEST' });\n        const token = await authService.getAccessToken();\n        fetch(`api/getFriends?id=${id}`, {\n            method: 'GET',\n            headers: !token ? {} : { 'Authorization': `Bearer ${token}` }\n        })\n            .then(response => {\n                if (!response.ok) {\n                    return []\n                } else {\n                    return response.json()\n                }\n            })\n            .then(data => {\n                dispatch({ type: 'RECEIVE_LIST_OF_FRIENDS', listOfFriends: data });\n            });\n    },\n};\n\nconst unloadedState: ProfileState = { user: null, isLoading: <div></div>, listOfFriends: [] };\n\nexport const reducer: Reducer<ProfileState> = (\n    state: ProfileState | undefined,\n    incomingAction: Action): ProfileState => {\n    if (state === undefined) {\n        return unloadedState;\n    }\n    const action = incomingAction as KnownAction;\n    switch (action.type) {\n        case 'REQUEST':\n            return {\n                ...state,\n                user: null,\n                isLoading: <div className=\"spinner-border text-primary\" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                </div>\n            };\n        case 'RECEIVE_LIST_OF_FRIENDS':\n            return {\n                ...state,\n                listOfFriends: action.listOfFriends\n            };\n        case 'RECEIVE':\n            return {\n                ...state,\n                user: action.user,\n                isLoading: <div></div>\n            };\n        default:\n            return state;\n    }\n};\n","import { Action, Reducer } from 'redux';\nimport { AppThunkAction } from '..';\nimport authService from '../../components/api-authorization/AuthorizeService';\nimport { UserModel } from './ProfileStore';\n\nexport interface EditProfileState {\n    isLoading: boolean;\n    user: UserModel;\n    status: string\n}\n\ninterface Request {\n    type: 'REQUEST';\n}\n\ninterface Receive {\n    type: 'RECEIVE';\n    user: UserModel;\n    status: string\n}\n\ntype KnownAction = Request | Receive;\n\nexport const actionCreators = {\n    getEditProfile: (): AppThunkAction<KnownAction> => async (dispatch, getState) => {\n        const token = await authService.getAccessToken();\n        fetch(`api/EditProfile`, {\n            method: 'GET',\n            headers: !token ? {} : { 'Authorization': `Bearer ${token}` }\n        })\n            .then(response => response.json() as Promise<UserModel>)\n            .then(data => {\n                dispatch({ type: 'RECEIVE', user: data, status: 'downloaded' });\n            });\n        dispatch({ type: 'REQUEST' });\n    },\n    postEditProfile: (user: UserModel): AppThunkAction<KnownAction> => async (dispatch, getState) => {\n        const token = await authService.getAccessToken();\n        const formData = new FormData()\n        formData.append('Input.FirstName', user.firstName)\n        formData.append('Input.SecondName', user.secondName)\n        formData.append('Input.Country', user.country)\n        formData.append('Input.City', user.city)\n        formData.append('Input.Languages', user.languages)\n        formData.append('Input.DateOfBirth', user.dateOfBirth.toString())\n        formData.append('Input.FamilyStatus', user.familyStatus)\n        formData.append('Input.Avatar', user.avatar)\n        fetch(`api/EditProfile`, {\n            method: 'POST',\n            headers: !token ? {} : { 'Authorization': `Bearer ${token}` },\n            body: formData\n        })\n            .then(response => response.json() as Promise<UserModel>)\n            .then(data => {\n                dispatch({ type: 'RECEIVE', user: data, status: 'ok 200' });\n            });\n        dispatch({ type: 'REQUEST' });\n    }\n};\n\nconst unloadedState: EditProfileState = {\n    user: {\n        id: '',\n        firstName: '',\n        secondName: '',\n        familyStatus: '',\n        dateOfBirth: new Date(),\n        country: '',\n        city: '',\n        languages: '',\n        avatar: '',\n        isAuthor: false\n    },\n    isLoading: false,\n    status: ''\n};\n\nexport const reducer: Reducer<EditProfileState> = (state: EditProfileState | undefined, incomingAction: Action): EditProfileState => {\n    if (state === undefined) {\n        return unloadedState;\n    }\n\n    const action = incomingAction as KnownAction;\n    switch (action.type) {\n        case 'REQUEST':\n            return {\n                user: state.user,\n                isLoading: true,\n                status: ''\n            };\n        case 'RECEIVE':\n            return {\n                isLoading: false,\n                user: action.user,\n                status: action.status\n            };\n            break;\n    }\n    return state;\n};\n","import { Action, Reducer } from 'redux';\nimport { AppThunkAction } from '..';\nimport authService from '../../components/api-authorization/AuthorizeService';\nimport { UserModel } from '../Profile/ProfileStore';\n\nexport interface Friend extends UserModel {\n    id: string\n}\n\nexport interface FriendsState {\n    isLoading: boolean;\n    listOfFriends: Friend[];\n    listOfNotFriends: Friend[];\n}\nconst unloadedState: FriendsState = { isLoading: false, listOfFriends: [], listOfNotFriends: [] };\ninterface Request {\n    type: 'REQUEST';\n}\ninterface ReceiveFriends {\n    type: 'RECEIVE_LIST_OF_FRIENDS';\n    listOfFriends: Friend[]\n}\ninterface ReceiveNotFriends {\n    type: 'RECEIVE_LIST_OF_NOT_FRIENDS';\n    listOfNotFriends: Friend[]\n}\n\ntype KnownAction = Request | ReceiveNotFriends | ReceiveFriends;\n\nexport const actionCreators = {\n    requestFriends: (): AppThunkAction<KnownAction> => async (dispatch, getState) => {\n        dispatch({ type: 'REQUEST' });\n        const token = await authService.getAccessToken();\n        fetch(`api/friends`, {\n            method: 'GET',\n            headers: !token ? {} : { 'Authorization': `Bearer ${token}` }\n        })\n            .then(response => {\n                if (!response.ok) {\n                    return []\n                } else {\n                    return response.json()\n                }\n            })\n            .then(data => {\n                dispatch({ type: 'RECEIVE_LIST_OF_FRIENDS', listOfFriends: data });\n            });\n    },\n    requestNotFriends: (): AppThunkAction<KnownAction> => async (dispatch, getState) => {\n        dispatch({ type: 'REQUEST' });\n        const token = await authService.getAccessToken();\n        fetch(`api/friends/notFriends`, {\n            method: 'GET',\n            headers: !token ? {} : { 'Authorization': `Bearer ${token}` }\n        })\n            .then(response => {\n                if (!response.ok) {\n                    return []\n                } else {\n                    return response.json()\n                }\n            })\n            .then(data => {\n                dispatch({ type: 'RECEIVE_LIST_OF_NOT_FRIENDS', listOfNotFriends: data });\n            });\n    },\n};\n\nexport const reducer: Reducer<FriendsState> = (state: FriendsState | undefined, incomingAction: Action): FriendsState => {\n    if (state === undefined) {\n        return unloadedState;\n    }\n\n    const action = incomingAction as KnownAction;\n    switch (action.type) {\n        case 'REQUEST':\n            return {\n                isLoading: true,\n                listOfNotFriends: state.listOfNotFriends,\n                listOfFriends: state.listOfFriends\n            };\n        case 'RECEIVE_LIST_OF_NOT_FRIENDS':\n            return {\n                isLoading: false,\n                listOfNotFriends: action.listOfNotFriends,\n                listOfFriends: state.listOfFriends\n            };\n        case 'RECEIVE_LIST_OF_FRIENDS':\n            return {\n                isLoading: false,\n                listOfNotFriends: state.listOfNotFriends,\n                listOfFriends: action.listOfFriends\n            };\n        default:\n            return state;\n    }\n};\n","import { Action, Reducer } from 'redux';\nimport { AppThunkAction } from '..';\nimport authService from '../../components/api-authorization/AuthorizeService';\n\nexport interface DialogState {\n    isLoading: boolean\n    withWhomId: string\n    dialog: Message[]\n}\nexport interface Message {\n    id: string\n    firstUserId: string\n    secondUserId: string\n    message: string\n    createDate: Date\n    avatar: string\n    firstId: string\n    secondId: string\n    withWhomId: string\n    isViewed: boolean\n}\ninterface Request {\n    type: 'REQUEST';\n}\ninterface AddMessageRequest {\n    type: 'ADD_MESSAGE'\n    user: string\n    message: string\n    to: string\n}\ninterface RecieveMessage {\n    type: 'MESSAGE_RECEIVED'\n    message: Message\n}\ninterface RecieveMessageView {\n    type: 'MESSAGE_RECEIVED_VIEW'\n    message: Message\n}\ninterface GET_NUMBER_OF_UNREAD_DIALOGS {\n    type: 'GET_NUMBER_OF_UNREAD_DIALOGS'\n    id: string\n}\nexport interface ReceiveDialog {\n    type: 'RECEIVE_DIALOG'\n    messages: Message[]\n    withWhomId: string\n}\n\ntype KnownAction = Request | ReceiveDialog | AddMessageRequest | RecieveMessage | RecieveMessageView | GET_NUMBER_OF_UNREAD_DIALOGS\n\nexport const actionCreators = {\n    requestDialog: (toUserId: string): AppThunkAction<KnownAction> => async (dispatch, getState) => {\n        const token = await authService.getAccessToken()\n        const user = await authService.getUser()\n        fetch(`api/Dialog?toUserId=${toUserId}`, {\n            method: 'GET',\n            headers: !token ? {} : { 'Authorization': `Bearer ${token}` }\n        })\n            .then(response => {\n                return response.ok ? response.json() as Promise<Message[]> : []\n            })\n            .then(data => {\n                dispatch({ type: 'GET_NUMBER_OF_UNREAD_DIALOGS', id: user.sub})\n                dispatch({ type: 'RECEIVE_DIALOG', messages: data, withWhomId: toUserId });\n            });\n\n        dispatch({ type: 'REQUEST', });\n    },\n    sendMessage: (toUserId: string, message: string): AppThunkAction<KnownAction> => async (dispatch, getState) => {\n        const [user] = await Promise.all([authService.getUser()])\n        dispatch({ type: 'ADD_MESSAGE', user: user.Email, message: message, to: toUserId });\n    },\n    recieveMessage: (message: Message): AppThunkAction<KnownAction> => async (dispatch, getState) => {\n        console.log('MESSAGE_RECEIVED_VIEW')\n        dispatch({ type: 'MESSAGE_RECEIVED_VIEW', message: message})\n    },\n};\n\nconst unloadedState: DialogState = { isLoading: false, dialog: [], withWhomId: '' };\n\nexport const reducer: Reducer<DialogState> =\n    (state: DialogState | undefined, incomingAction: Action): DialogState => {\n        if (state === undefined) {\n            return unloadedState;\n        }\n        const action = incomingAction as KnownAction;\n        switch (action.type) {\n            case 'REQUEST':\n                return {\n                    ...state,\n                    isLoading: true,\n                    dialog: state.dialog\n                };\n            case 'MESSAGE_RECEIVED':\n                if (action.message.firstId == state.withWhomId || action.message.secondId == state.withWhomId) {\n                    if (action.message.firstId == state.withWhomId) {\n                        \n                    }\n                    return {\n                        ...state,\n                        dialog: [...state.dialog, action.message]\n                    }\n                }\n                return {\n                    ...state\n                }\n            case 'RECEIVE_DIALOG':\n                return {\n                    ...state,\n                    isLoading: false,\n                    dialog: action.messages,\n                    withWhomId: action.withWhomId\n                };\n                break;\n        }\n        return state;\n    };\n","import { Action, Reducer } from 'redux';\nimport { AppThunkAction } from '..';\nimport authService from '../../components/api-authorization/AuthorizeService';\nimport { UserModel } from '../Profile/ProfileStore';\nimport { Group } from '../Groups/GroupStore';\nimport { Comment } from '../../components/Comments/ListOfComments';\n\nexport interface PostsState {\n    recievedSuccess: boolean\n    posts: Post[]\n    user: UserModel | null\n    group: Group | null\n}\nexport interface Like {\n    id: string\n    userId: string\n    postId: string\n}\nexport interface Picture {\n    id: string\n    pictureLink: string\n}\nexport interface Post {\n    id: string\n    userId: string\n    postText: string\n    createDate: Date\n    pictureLink: Picture[]\n    likes: number\n    isLiked: boolean\n    comments: Comment[]\n    avatar: string\n    link: string\n}\ninterface CREATE_POST_REQUEST {\n    type: 'CREATE_POST_REQUEST';\n}\ninterface CREATE_POST_RECEIVE_OK {\n    type: 'CREATE_POST_RECEIVE_OK'\n    post: Post\n}\ninterface CREATE_POST_RECEIVE_BAD {\n    type: 'CREATE_POST_RECEIVE_BAD';\n}\ninterface RECIEVE_POSTS_OK {\n    type: 'RECIEVE_POSTS_OK';\n    posts: Post[]\n    user: UserModel | null\n}\ninterface RECIEVE_LIKES_OK {\n    type: 'RECIEVE_LIKES_OK';\n    likes: Like[]\n}\ninterface COMMENT_RECEIVED {\n    type: 'COMMENT_RECEIVED'\n    newComment: Comment\n}\ninterface LIKE_RECEIVED {\n    type: 'LIKE_RECEIVED'\n    newLike: {\n        countsOfLikes: number\n        postId: string\n        isLiked: boolean\n        userId: string\n    }\n    user: any\n}\ninterface SEND_LIKE {\n    type: 'SEND_LIKE'\n    userId: string\n    postId: string\n}\ninterface SEND_COMMENT {\n    type: 'SEND_COMMENT'\n    userId: string\n    postId: string\n    text: string\n}\ninterface RECIEVE_POSTS_GROUP_OK {\n    type: 'RECIEVE_POSTS_GROUP_OK'\n    posts: Post[]\n    group: Group | null\n}\ninterface RECIEVE_POSTS_BAD {\n    type: 'RECIEVE_POSTS_BAD'\n}\ninterface CREATE_POST {\n    type: 'CREATE_POST'\n    postText: string\n    pictureLink: string[] | undefined\n    groupId: string | undefined\n    userId: string\n}\n\ntype KnownAction = CREATE_POST | COMMENT_RECEIVED | SEND_COMMENT | SEND_LIKE | RECIEVE_LIKES_OK | LIKE_RECEIVED | RECIEVE_POSTS_GROUP_OK | CREATE_POST_REQUEST | CREATE_POST_RECEIVE_OK | CREATE_POST_RECEIVE_BAD | RECIEVE_POSTS_OK | RECIEVE_POSTS_BAD;\n\nexport const actionCreators = {\n    sendPost: (postText: string, pictureLink?: string[], groupId?: string): AppThunkAction<KnownAction> => async (dispatch, getState) => {\n        const token = await authService.getAccessToken();\n        const [user] = await Promise.all([authService.getUser()])\n        dispatch({ type: 'CREATE_POST', postText: postText, userId: user.sub, groupId: groupId, pictureLink: pictureLink })\n    },\n    requestPosts: (method: string): AppThunkAction<KnownAction> => async (dispatch, getState) => {\n        const appState = getState();\n        const token = await authService.getAccessToken();\n        if (method === 'Profile') {\n            if (appState.profile && appState.profile.user) {\n                fetch(`api/getPosts?userId=${appState.profile.user.id}`, {\n                    method: 'GET',\n                    headers: !token ? {} : {\n                        'Authorization': `Bearer ${token}`\n                    },\n                })\n                    .then(response => {\n                        return response.ok\n                            ? response.json()\n                            : []\n                    })\n                    .then(data => {\n                        dispatch({ type: 'RECIEVE_POSTS_OK', posts: data, user: appState.profile!.user })\n                    })\n            }\n        }\n        else if (method === 'Group') {\n            if (appState.group && appState.group.group.id) {\n                fetch(`api/getPosts?userId=${appState.group.group.id}`, {\n                    method: 'GET',\n                    headers: !token ? {} : {\n                        'Authorization': `Bearer ${token}`\n                    },\n                })\n                    .then(response => {\n                        return response.ok\n                            ? response.json()\n                            : []\n                    })\n                    .then(data => {\n                        dispatch({ type: 'RECIEVE_POSTS_GROUP_OK', posts: data, group: appState.group!.group })\n                    })\n            }\n        } else if (method === 'News') {\n            const isAuthenticated = await authService.isAuthenticated()\n            if (isAuthenticated.valueOf()) {\n                fetch(`api/getNewsPosts`, {\n                    method: 'GET',\n                    headers: !token ? {} : {\n                        'Authorization': `Bearer ${token}`\n                    },\n                })\n                    .then(response => {\n                        return response.ok\n                            ? response.json()\n                            : []\n                    })\n                    .then(data => {\n                        dispatch({ type: 'RECIEVE_POSTS_OK', posts: data, user: appState.profile!.user })\n                    })\n            }\n        }\n    },\n    getLike: (postId: string): AppThunkAction<KnownAction> => async (dispatch, getState) => {\n        fetch(`api/getLike?postId=${postId}`, {\n            method: 'GET',\n        })\n            .then(response => {\n                return (response.json() as Promise<Like[]>)\n            })\n            .then(data => dispatch({ type: 'RECIEVE_LIKES_OK', likes: data }))\n        dispatch({ type: 'CREATE_POST_REQUEST' })\n    },\n    sendLike: (postId: string): AppThunkAction<KnownAction> => async (dispatch, getState) => {\n        let user = await authService.getUser()\n        dispatch({ type: 'SEND_LIKE', userId: user.sub, postId: postId })\n    },\n    sendComment: (postId: string, text: string): AppThunkAction<KnownAction> => async (dispatch, getState) => {\n        let user = await authService.getUser()\n        dispatch({ type: 'SEND_COMMENT', userId: user.sub, postId: postId, text: text })\n    },\n};\n\nconst unloadedState: PostsState = { recievedSuccess: false, posts: [], user: null, group: null };\n\nexport const reducer: Reducer<PostsState> = (state: PostsState | undefined, incomingAction: Action): PostsState => {\n    if (state === undefined) {\n        return unloadedState;\n    }\n\n    const action = incomingAction as KnownAction;\n    switch (action.type) {\n        case 'LIKE_RECEIVED':\n            return {\n                ...state,\n                posts: state.posts.map((data) => {\n                    if (data.id === action.newLike.postId) {\n                        data.likes = action.newLike.countsOfLikes\n                        if (action.user.sub === action.newLike.userId)\n                            data.isLiked = action.newLike.isLiked\n                    }\n                    return data\n                })\n            }\n        case 'RECIEVE_POSTS_OK':\n            return {\n                ...state,\n                user: action.user,\n                posts: action.posts,\n            };\n        case 'COMMENT_RECEIVED':\n            return {\n                ...state,\n                posts: state.posts.map((data) => {\n                    if (data.id === action.newComment.postId) {\n                        data.comments = [...data.comments, action.newComment]\n                    }\n                    return data\n                })\n            };\n        case 'RECIEVE_POSTS_GROUP_OK':\n            return {\n                ...state,\n                group: action.group,\n                posts: action.posts,\n            };\n        case 'RECIEVE_POSTS_BAD':\n            return {\n                ...state\n            };\n        case 'CREATE_POST_REQUEST':\n            return {\n                ...state,\n                recievedSuccess: false\n            };\n        case 'CREATE_POST_RECEIVE_OK':\n            return {\n                ...state,\n                posts: [action.post, ...state.posts],\n                recievedSuccess: true\n            };\n        case 'CREATE_POST_RECEIVE_BAD':\n            return {\n                ...state,\n                recievedSuccess: false\n            };\n    }\n    return state;\n};\n","import { Action, Reducer } from 'redux';\nimport { AppThunkAction } from '..';\nimport authService from '../../components/api-authorization/AuthorizeService';\n\nexport interface PhotoAlbumSate {\n    isLoading: boolean\n    pictures: Picture[]\n    isAuthor: boolean\n}\nexport interface Picture {\n    id: string\n    postId: string\n    userId: string\n    pictureLink: string\n}\ninterface REQUEST_ALBUM {\n    type: 'REQUEST_ALBUM';\n}\ninterface RECEIVE_ALBUM {\n    type: 'RECEIVE_ALBUM'\n    pictures: Picture[]\n    isAuthor: boolean\n}\n\ntype KnownAction = REQUEST_ALBUM | RECEIVE_ALBUM;\n\nexport const actionCreators = {\n    requestAlbum: (): AppThunkAction<KnownAction> => async (dispatch, getState) => {\n        const appState = getState();\n        if (appState && appState.profile && appState.profile.user) {\n            const token = await authService.getAccessToken();\n            fetch(`api/getAlbum?albumId=${appState.profile.user!.id}`, {\n                method: 'GET',\n                headers: !token ? {} : { 'Authorization': `Bearer ${token}` }\n            })\n                .then(response => response.json() as Promise<any>)\n                .then(data => {\n                    dispatch({ type: 'RECEIVE_ALBUM', pictures: data, isAuthor: appState.profile!.user!.isAuthor });\n                });\n        }\n        dispatch({ type: 'REQUEST_ALBUM', });\n    },\n    addToAlbum: (pictures: string[]): AppThunkAction<KnownAction> => async (dispatch, getState) => {\n        const appState = getState()\n        if (appState && appState.profile && appState.profile.user) {\n            const token = await authService.getAccessToken();\n            fetch(`api/addPicture`, {\n                method: 'POST',\n                headers: !token ? {} : { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' },\n                body: JSON.stringify({albumId: appState.profile.user.id, pictures: pictures})\n            })\n                .then(response => response.json() as Promise<any>)\n                .then(data => {\n                    dispatch({ type: 'RECEIVE_ALBUM', pictures: data, isAuthor: appState.profile!.user!.isAuthor });\n                });\n\n            dispatch({ type: 'REQUEST_ALBUM', });\n        }\n    }\n};\n\nconst unloadedState: PhotoAlbumSate = { isLoading: false, pictures: [], isAuthor: false };\n\nexport const reducer: Reducer<PhotoAlbumSate> = (state: PhotoAlbumSate | undefined, incomingAction: Action): PhotoAlbumSate => {\n    if (state === undefined) {\n        return unloadedState;\n    }\n\n    const action = incomingAction as KnownAction;\n    switch (action.type) {\n        case 'REQUEST_ALBUM':\n            return {\n                ...state,\n                isLoading: true\n            };\n        case 'RECEIVE_ALBUM':\n            return {\n                ...state,\n                pictures: action.pictures,\n                isLoading: false,\n                isAuthor: action.isAuthor\n            };\n            break;\n    }\n    return state;\n};\n","import { Action, Reducer } from 'redux';\nimport { AppThunkAction } from '..';\nimport authService from '../../components/api-authorization/AuthorizeService';\nimport { User } from '../Profile/ProfileStore';\n\nexport interface GroupState {\n    isLoading: boolean\n    isAuthor: boolean\n    isAdmin: boolean\n    group: Group\n    users: User[]\n    admins: User[]\n}\nexport interface Group {\n    id: string\n    userId: string\n    name: string\n    description: string\n    avatarLink: string\n}\n\ninterface REQUEST {\n    type: 'REQUEST'\n}\ninterface RECEIVE {\n    type: 'RECEIVE'\n}\ninterface GET_GROUP {\n    type: 'GET_GROUP'\n    group: Group\n    isAuthor: boolean\n    isAdmin: boolean\n}\ninterface GET_LIST_OF_SUBSCRIBERS {\n    type: 'GET_LIST_OF_SUBSCRIBERS'\n    users: any\n    admins: any\n}\ninterface SMTH_WENT_WRONG {\n    type: 'SMTH_WENT_WRONG'\n}\nexport interface createGroup {\n    avatarLink: string,\n    name: string,\n    description: string\n}\nexport interface editGroup {\n    id: string,\n    avatarLink: string,\n    name: string,\n    description: string\n}\nexport interface deleteGroup {\n    id: string\n}\nexport interface ChangeGroupAdmin {\n    groupId: string,\n    userId: string\n}\ntype KnownObject = createGroup | editGroup | deleteGroup | ChangeGroupAdmin\ntype KnownAction = SMTH_WENT_WRONG | RECEIVE | REQUEST | GET_GROUP | GET_LIST_OF_SUBSCRIBERS\n\nexport const actionCreators = {\n    request: (object: KnownObject, method: string): AppThunkAction<KnownAction> => async (dispatch, getState) => {\n        const token = await authService.getAccessToken();\n        fetch(`api/${method}`, {\n            method: 'POST',\n            headers: !token ? {} : { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json', },\n            body: JSON.stringify(object)\n        })\n            .then(response => {\n                response.ok ? dispatch({ type: 'RECEIVE' }) : dispatch({ type: 'SMTH_WENT_WRONG' })\n            })\n\n        dispatch({ type: 'REQUEST' });\n    },\n    getGroup: (id: string): AppThunkAction<KnownAction> => async (dispatch, getState) => {\n        const token = await authService.getAccessToken();\n        fetch(`api/groupInfo?id=${id}`, {\n            method: 'GET',\n            headers: !token ? {} : { 'Authorization': `Bearer ${token}` }\n        })\n            .then(response => {\n                return (\n                    response.json()\n                )\n            })\n            .then(data => {\n                dispatch({ type: 'GET_GROUP', group: data.group, isAuthor: data.isAuthor, isAdmin: data.isAdmin })\n            })\n\n        dispatch({ type: 'REQUEST' });\n    },\n    getListOfSubscribers: (id: string): AppThunkAction<KnownAction> => async (dispatch, getState) => {\n        const appState = getState()\n        if (appState && appState.group && appState.group.group) {\n            fetch(`api/getListOfSubscribers?groupId=${appState.group.group.id}`, {\n                method: 'GET'\n            })\n                .then(response => {\n                    return (\n                        response.json()\n                    )\n                })\n                .then(data => {\n                    dispatch({ type: 'GET_LIST_OF_SUBSCRIBERS', users: data.users, admins: data.admins })\n                })\n\n            dispatch({ type: 'REQUEST' });\n        }\n    },\n};\n\nconst unloadedState: GroupState = {\n    isLoading: false, group: {\n        id: '', userId: '', name: '', description: '', avatarLink: ''\n    }, isAuthor: false, isAdmin: false, users: [], admins: []\n};\n\nexport const reducer: Reducer<GroupState> = (state: GroupState | undefined, incomingAction: Action): GroupState => {\n    if (state === undefined) {\n        return unloadedState;\n    }\n\n    const action = incomingAction as KnownAction;\n    switch (action.type) {\n        case 'GET_GROUP':\n            return {\n                ...state,\n                isAuthor: action.isAuthor,\n                group: action.group,\n                isLoading: false,\n                isAdmin: action.isAdmin\n            };\n        case 'GET_LIST_OF_SUBSCRIBERS':\n            return {\n                ...state,\n                admins: action.admins,\n                users: action.users\n            };\n        case 'SMTH_WENT_WRONG':\n            return {\n                ...state,\n                isLoading: false\n            };\n        case 'REQUEST':\n            return {\n                ...state,\n                isLoading: true\n            };\n        case 'RECEIVE':\n            return {\n                ...state,\n                isLoading: false\n            };\n            break;\n    }\n    return state;\n};\n","import { Action, Reducer } from 'redux';\nimport { AppThunkAction } from '..';\nimport authService from '../../components/api-authorization/AuthorizeService';\n\nexport interface NotificationsState {\n    isLoading: boolean\n    notifications: Notification[]\n}\n\ninterface Notification {\n    id: string\n    text: string\n    link: string\n    userId: string\n    isViewed: boolean\n    createDate: Date\n    image: string\n}\ninterface REQUEST_NOTIFICATIONS {\n    type: 'REQUEST_NOTIFICATIONS'\n}\ninterface RECEIVE_NOTIFICATIONS {\n    type: 'RECEIVE_NOTIFICATIONS'\n    notifications: Notification[]\n}\ninterface NOTIFICATION_RECIEVED {\n    type: 'NOTIFICATION_RECIEVED'\n    notification: Notification\n}\ninterface REMOVE_NOTIFICATIONS {\n    type: 'REMOVE_NOTIFICATIONS'\n    ids: string[]\n}\n\ntype KnownAction = REQUEST_NOTIFICATIONS | RECEIVE_NOTIFICATIONS | NOTIFICATION_RECIEVED | REMOVE_NOTIFICATIONS\n\nexport const actionCreators = {\n    request: (): AppThunkAction<KnownAction> => async (dispatch, getState) => {\n        const token = await authService.getAccessToken();\n        fetch(`api/getNotifications`, {\n            headers: !token ? {} : { 'Authorization': `Bearer ${token}` }\n        })\n            .then(response => {\n                return response.ok\n                    ? response.json()\n                    : []\n            })\n            .then(data => {\n                dispatch({ type: 'RECEIVE_NOTIFICATIONS', notifications: data });\n            });\n\n        dispatch({ type: 'REQUEST_NOTIFICATIONS' });\n    },\n    removeNotifications: (ids: string[]): AppThunkAction<KnownAction> => async (dispatch, getState) => {\n        if (ids != []) dispatch({ type: 'REMOVE_NOTIFICATIONS', ids: ids })\n    }\n};\n\nconst unloadedState: NotificationsState = { isLoading: false, notifications: [] };\n\nexport const reducer: Reducer<NotificationsState> = (state: NotificationsState | undefined, incomingAction: Action): NotificationsState => {\n    if (state === undefined) {\n        return unloadedState;\n    }\n\n    const action = incomingAction as KnownAction;\n    switch (action.type) {\n        case 'REQUEST_NOTIFICATIONS':\n            return {\n                isLoading: true,\n                notifications: state.notifications\n            };\n        case 'RECEIVE_NOTIFICATIONS':\n            return {\n                isLoading: false,\n                notifications: action.notifications\n            };\n        case 'NOTIFICATION_RECIEVED':\n            return {\n                ...state,\n                notifications: [action.notification, ...state.notifications]\n            }\n            break;\n    }\n    return state;\n};\n","import { Action, Reducer } from 'redux';\nimport { AppThunkAction } from '..';\nimport { Message } from '../Dialogs/DialogStore';\n\nexport interface MesNotificationsState {\n    messages: Message[]\n}\n\ninterface Receive {\n    type: 'RECEIVE';\n}\ninterface MESSAGE_RECEIVED {\n    type: 'MESSAGE_RECEIVED',\n    message: Message\n}\ninterface DELETE_NOTIFICATION {\n    type: 'DELETE_NOTIFICATION'\n    message: Message\n}\n\ntype KnownAction = Receive | MESSAGE_RECEIVED | DELETE_NOTIFICATION;\n\nexport const actionCreators = {\n    deleteNotification: (message: Message): AppThunkAction<KnownAction> => async (dispatch, getState) => {\n        setTimeout(() => {\n            dispatch({ type: 'DELETE_NOTIFICATION', message: message })\n        }, 5000)\n    },\n};\n\nconst unloadedState: MesNotificationsState = { messages: [] };\nexport const reducer: Reducer<MesNotificationsState> = (state: MesNotificationsState | undefined, incomingAction: Action): MesNotificationsState => {\n    if (state === undefined) {\n        return unloadedState;\n    }\n\n    const action = incomingAction as KnownAction;\n    switch (action.type) {\n        case 'DELETE_NOTIFICATION':\n            let a = state.messages.filter((data) => {\n                if (data.id != action.message.id)\n                    return data\n            })\n            return {\n                messages: a\n            };\n        case 'MESSAGE_RECEIVED':\n            if (window.location.pathname.includes(action.message.firstId) || window.location.pathname.includes(action.message.secondId))\n                return { ...state }\n            return {\n                messages: [...state.messages, action.message]\n            };\n            break;\n    }\n    return state;\n};\n","import * as LoginForm from './api-auth/LoginForm';\nimport * as Profile from './Profile/ProfileStore'\nimport * as EditProfile from './Profile/EditProfileStore'\nimport * as Friends from './Friends/FriendsStore'\nimport * as Dialog from '../store/Dialogs/DialogStore'\nimport * as CreatePost from '../store/Posts/PostsStore'\nimport * as PhotoAlbum from '../store/PhotoAlbum/PhotoAlbumStore'\nimport * as Group from '../store/Groups/GroupStore'\nimport * as Notification from '../store/Notifications/Notifications'\nimport * as MesNotification from '../store/MessageNotifications/MesNotifcationsStore'\n\nexport interface ApplicationState {\n    loginForm: LoginForm.LoginFormState | undefined\n    profile: Profile.ProfileState | undefined\n    editProfile: EditProfile.EditProfileState | undefined\n    friends: Friends.FriendsState | undefined\n    dialog: Dialog.DialogState | undefined\n    createPost: CreatePost.PostsState | undefined\n    photoAlbum: PhotoAlbum.PhotoAlbumSate | undefined\n    group: Group.GroupState | undefined\n    notification: Notification.NotificationsState | undefined\n    mesNotifications: MesNotification.MesNotificationsState | undefined\n}\n\nexport const reducers = {\n    loginForm: LoginForm.reducer,\n    profile: Profile.reducer,\n    editProfile: EditProfile.reducer,\n    friends: Friends.reducer,\n    dialog: Dialog.reducer,\n    createPost: CreatePost.reducer,\n    photoAlbum: PhotoAlbum.reducer,\n    group: Group.reducer,\n    notification: Notification.reducer,\n    mesNotifications: MesNotification.reducer\n};\n\nexport interface AppThunkAction<TAction> {\n    (dispatch: (action: TAction) => void, getState: () => ApplicationState): void;\n}\n","import * as signalR from \"@microsoft/signalr\"\nimport authService from \"../../components/api-authorization/AuthorizeService\";\n\nasync function getToken() {\n    const token = await authService.getAccessToken()\n    return token !== null ? token : ''\n}\nlet connection = new signalR.HubConnectionBuilder()\n    .withUrl(\"/chatHub\", {\n        accessTokenFactory: () => {\n            return getToken()\n        },\n    })\n    .configureLogging(signalR.LogLevel.None)\n    .build();\nexport const signalRRegisterCommands = async (store: any) => {\n    connection.on(\"ReceiveMessage\", async function (data) {\n        store.dispatch({ type: 'MESSAGE_RECEIVED', message: data })\n        const user = await authService.getUser()\n        store.dispatch({ type: 'GET_NUMBER_OF_UNREAD_DIALOGS', id: user.sub })\n    });\n    connection.on(\"NewPost\", function (data) {\n        data.comments = []\n        store.dispatch({ type: 'CREATE_POST_RECEIVE_OK', post: data })\n    });\n    connection.on(\"NewLike\", async function (data) {\n        let user = await authService.getUser()\n        store.dispatch({ type: 'LIKE_RECEIVED', newLike: data, user: user })\n    });\n    connection.on(\"NewComment\", function (data) {\n        store.dispatch({ type: 'COMMENT_RECEIVED', newComment: data })\n    });\n    connection.on(\"GetNumberOfUnreadDialogs\", function (data) {\n        if (document.getElementById('dialogsSpan')) {\n            if (data === 0) document.getElementById('dialogsSpan')!.className = \"badge badge-pill badge-warning d-none\"\n            else {\n                document.getElementById('dialogsSpan')!.textContent = data\n                document.getElementById('dialogsSpan')!.className = \"badge badge-pill badge-warning\"\n            }\n        }\n        else if (data !== 0) document.getElementById('Dialogs')!.innerHTML += `<span class=\"badge badge-pill badge-warning\" id=\"dialogsSpan\">${data}</span>`\n    })\n    connection.on(\"RecieveNotification\", function (data) {\n        store.dispatch({ type: 'NOTIFICATION_RECIEVED', notification: data })\n    });\n    async function start() {\n        try {\n            console.log('CONNECTION START')\n            await connection.start()\n            console.log(\"CONNECTED\")\n        } catch (err) {\n            console.log(err)\n            setTimeout(() => start(), 5000)\n        }\n    }\n    connection.onclose(async () => {\n        console.log('DISCONNECTED. Trying to reconnect')\n        start()\n    })\n    const user = await authService.getUser()\n    await connection.start().then(() => {\n        if (connection.state === 'Connected') store.dispatch({ type: 'GET_NUMBER_OF_UNREAD_DIALOGS', id: user.sub })\n    })\n};\n\nexport const ping = (store: any) => (next: (arg0: any) => any) => async (action: any) => {\n    if (connection.state === 'Connected') {\n        switch (action.type) {\n            case 'GET_NUMBER_OF_UNREAD_DIALOGS':\n                connection.invoke('GetNumberOfUnreadDialogs', action.id)\n                break;\n            case 'CREATE_POST':\n                connection.invoke('SendPost', action.postText, action.pictureLink, action.userId, action.groupId)\n                break;\n            case 'MESSAGE_RECEIVED_VIEW':\n                connection.invoke('MESSAGE_RECEIVED_VIEW', action.message)\n                connection.invoke('GetNumberOfUnreadDialogs', action.message.secondId)\n                break;\n            case 'ADD_MESSAGE':\n                connection.invoke('SendMessage', action.user, action.message, action.to)\n                break;\n            case 'SEND_LIKE':\n                connection.invoke('SendLikes', action.userId, action.postId)\n                break;\n            case 'SEND_COMMENT':\n                connection.invoke('SendComment', action.userId, action.postId, action.text)\n                break;\n            case 'REMOVE_NOTIFICATIONS':\n                connection.invoke('RemoveNotifications', action.ids)\n                break;\n        }\n    }\n    return next(action)\n}","import * as React from 'react';\nimport { RouteComponentProps } from 'react-router';\nimport { connect } from 'react-redux';\nimport { ApplicationState } from '../../store';\nimport * as MesNotificationsStore from '../../store/MessageNotifications/MesNotifcationsStore';\nimport './mn.scss'\n\ntype MesNotificationsProps =\n    MesNotificationsStore.MesNotificationsState &\n    typeof MesNotificationsStore.actionCreators &\n    RouteComponentProps<{}>;\ninterface IState {\n}\nclass MesNotifications extends React.PureComponent<MesNotificationsProps, IState> {\n    constructor(props: MesNotificationsProps) {\n        super(props)\n        this.state = {\n\n        }\n    }\n    render() {\n        if (this.props.messages.length != 0)\n            return (\n                <div id=\"notifications\">\n                    {this.props.messages.map(data => {\n                        this.props.deleteNotification(data)\n                        return (\n                            <div key={data.id} className='content_not pb-4'>\n                                <div className=\"header_not\">\n                                    <img src={data.avatar} alt=\"\" width=\"30\" height=\"30\" className=\"img-avatar_not\" />\n                                    <div className=\"header_info_not\">\n                                        <h5 className=\"author_not\">{data.firstUserId}</h5>\n                                    </div>\n                                    <div className=\"text_not\">\n                                        {data.message}\n                                    </div>\n                                </div>\n                            </div>\n                        )\n                    })}\n                </div>\n            )\n        else return (<div></div>)\n\n    }\n};\n\nexport default connect(\n    (state: ApplicationState) => state.mesNotifications,\n    MesNotificationsStore.actionCreators\n)(MesNotifications as any);","import * as React from 'react';\nimport * as NotificationStore from '../../store/Notifications/Notifications';\nimport { RouteComponentProps } from 'react-router';\nimport { connect } from 'react-redux';\nimport { ApplicationState } from '../../store';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faBell } from '@fortawesome/free-solid-svg-icons'\n\ntype NotificationProps =\n    NotificationStore.NotificationsState &\n    typeof NotificationStore.actionCreators &\n    RouteComponentProps<{}>;\ninterface IState {\n    count: string\n}\nclass Notifications extends React.PureComponent<NotificationProps, IState> {\n    constructor(props: NotificationProps) {\n        super(props)\n        this.state = {\n            count: this.props.notifications.length == 0 ? '' : this.props.notifications.length.toString()\n        }\n    }\n    public componentDidMount() {\n        this.ensureDataFetched()\n    }\n    private remove() {\n        const a = this.props.notifications.map(data => data.id)\n        this.props.removeNotifications(a)\n        this.setState({ count: this.props.notifications.length == 0 ? '' : this.props.notifications.length.toString() })\n    }\n    private ensureDataFetched() {\n        this.props.request()\n    }\n    public renderButton() {\n        this.setState({ count: this.props.notifications.length == 0 ? '' : this.props.notifications.length.toString() })\n    }\n    render() {\n        var count = this.props.notifications.length == 0 ? '' : this.props.notifications.length.toString()\n        return (\n            <React.Fragment>\n                <div className=\"dropdown\">\n                    <button className=\"btn dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\"\n                        data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"\n                        onClick={() => this.remove()}>\n                        <span className=\"badge badge-pill badge-warning\">{count}</span>\n                        <FontAwesomeIcon icon={faBell} />\n                    </button>\n                    {count != ''\n                        ?\n                        <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                            {this.props.notifications.map((data) => {\n                                const b = data.image != \"\" ? <img src={data.image} width=\"10\" height=\"10\" alt=\"\" /> : <div></div>\n                                return (\n                                    <a key={data.id} className=\"dropdown-item\">\n                                        <div>\n                                            {b}\n                                            {data.text}\n                                        </div>\n                                    </a>\n                                )\n                            })}\n                        </div>\n                        :\n                        <div></div>}\n                </div>\n            </React.Fragment>\n        );\n    }\n};\n\nexport default connect(\n    (state: ApplicationState) => state.notification,\n    NotificationStore.actionCreators\n)(Notifications as any);","import React, { Component, Fragment } from 'react';\nimport { NavItem, NavLink } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport authService from './AuthorizeService';\nimport { ApplicationPaths } from './ApiAuthorizationConstants'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSignOutAlt, faUser, faUsers, faComments, faCommentAlt, faNewspaper } from '@fortawesome/free-solid-svg-icons'\nimport Notifications from '../Notifications/Notifications';\n\ninterface IProps {\n    //action: any\n}\ninterface IState {\n    isAuthenticated: boolean,\n    userName: string | null,\n    userId: string | null,\n}\n\nexport class LoginMenu extends Component<IProps, IState> {\n    _subscription: any\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            isAuthenticated: false,\n            userName: null,\n            userId: null\n        };\n    }\n\n    componentDidMount() {\n        this._subscription = authService.subscribe(() => this.populateState());\n        this.populateState();\n    }\n\n    componentWillUnmount() {\n        authService.unsubscribe(this._subscription);\n    }\n\n    async populateState() {\n        const [isAuthenticated, user] = await Promise.all([authService.isAuthenticated(), authService.getUser()])\n        this.setState({\n            isAuthenticated,\n            userName: user && user.Email,\n            userId: user && user.sub\n        });\n    }\n\n    render() {\n        const { isAuthenticated, userName, userId } = this.state;\n        if (!isAuthenticated) {\n            const registerPath = `${ApplicationPaths.Register}`;\n            const loginPath = `${ApplicationPaths.Login}`;\n            return this.anonymousView(registerPath, loginPath);\n        } else {\n            const profilePath = `${ApplicationPaths.Profile}`;\n            const logoutPath = { pathname: `${ApplicationPaths.LogOut}`, state: { local: true } };\n            return this.authenticatedView(userName, userId, profilePath, logoutPath);\n        }\n    }\n\n    authenticatedView(userName: {} | null | undefined, userId: {} | null | undefined, profilePath: string, logoutPath: { pathname: string; state: { local: boolean; }; }) {\n        return (\n            <Fragment>\n                <NavItem>\n                    <NavLink tag={Link} className=\"text-dark\" to=\"/\"><FontAwesomeIcon icon={faNewspaper} /> News</NavLink>\n                </NavItem>\n                <NavItem>\n                    <NavLink tag={Link} className=\"text-dark\" to=\"/Friends\"><FontAwesomeIcon icon={faUsers} /> Friends</NavLink>\n                </NavItem>\n                <NavItem>\n                    <NavLink tag={Link} className=\"text-dark\" to=\"/Dialogs\"><div id='Dialogs'><FontAwesomeIcon icon={faCommentAlt} /> Dialogs</div></NavLink>\n                </NavItem>\n                <NavItem>\n                    <NavLink tag={Link} className=\"text-dark\" to=\"/ListOfGroups\"><FontAwesomeIcon icon={faComments} /> Groups</NavLink>\n                </NavItem>\n                <NavItem>\n                    <NavLink tag={Link} className=\"text-dark\" to={`/Profile/${userId}`}><FontAwesomeIcon icon={faUser} /> {userName} </NavLink>\n                </NavItem>\n                <NavItem>\n                    <NavLink tag={Link} className=\"text-dark\" to={logoutPath}><FontAwesomeIcon icon={faSignOutAlt} /></NavLink>\n                </NavItem>\n                <NavItem>\n                    <Notifications />\n                </NavItem>\n            </Fragment>);\n    }\n\n    anonymousView(registerPath: string, loginPath: string) {\n        return (<Fragment>\n            <NavItem>\n                <NavLink tag={Link} className=\"text-dark\" to={'/MyRegister'}>Register</NavLink>\n            </NavItem>\n            <NavItem>\n                <NavLink tag={Link} className=\"text-dark\" to={\"/MyLogin\"}>Login</NavLink>\n            </NavItem>\n        </Fragment>);\n    }\n}\n","import * as React from 'react';\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport './NavMenu.css';\nimport { LoginMenu } from './api-authorization/LoginMenu';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faUsers, faComments, faCommentAlt, faNewspaper } from '@fortawesome/free-solid-svg-icons'\n\nexport default class NavMenu extends React.PureComponent<{}, { isOpen: boolean }> {\n    public state = {\n        isOpen: false\n    };\n\n    public render() {\n        return (\n            <header>\n                <Navbar className=\"navbar navbar-expand-md navbar-light box-shadow mb-5 fixed-top bg-light\" >\n                    <Container>\n                        <NavbarBrand tag={Link} to=\"/\">MSN</NavbarBrand>\n                        <NavbarToggler onClick={this.toggle} className=\"mr-2\" />\n                        <Collapse className=\"\" isOpen={this.state.isOpen} navbar>\n                            <ul className=\"navbar-nav flex-grow\">\n                                <LoginMenu></LoginMenu>\n                            </ul>\n                        </Collapse>\n                    </Container>\n                </Navbar>\n            </header>\n        );\n    }\n\n    private toggle = () => {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n}\n","import * as React from 'react';\nimport { Container } from 'reactstrap';\nimport MesNotifications from './MessageNotifications/MesNotifications';\nimport NavMenu from './NavMenu';\n\nexport default (props: { children?: React.ReactNode }) => (\n    <React.Fragment>\n        <NavMenu />\n        <Container>\n            <main role=\"main\" style={{ marginTop:\"65px\" }}>\n                <MesNotifications />\n                {props.children}\n            </main>\n        </Container>\n    </React.Fragment>\n);\n","import * as React from 'react';\nimport './commentInput.scss'\ninterface IProps {\n    postId: string\n    sendComment: any\n}\ninterface IState {\n    commentText: string\n}\n\nexport class CreateComment extends React.PureComponent<IProps, IState> {\n    constructor(props: IProps) {\n        super(props)\n        this.state = {\n            commentText: ''\n        }\n        this.handleInputChange = this.handleInputChange.bind(this)\n    }\n    componentDidMount() {\n    }\n    handleInputChange(event: React.ChangeEvent<HTMLTextAreaElement>) {\n        this.setState({ commentText: event.target.value });\n    }\n    renderCreatePost() {\n        return (\n            <div className=\"form__group field\">\n                <textarea className=\"form__field\" placeholder=\"Name\" name=\"name\" required\n                    onChange={this.handleInputChange} value={this.state.commentText} />\n                <label className=\"form__label\">Send comment</label>\n                <div className=\"btn_send\" onClick={this.sendComment.bind(this)}>\n                    <span className=\"noselect\">Send</span>\n                    <div id=\"circle\"></div>\n                </div>\n            </div>\n        )\n    }\n    sendComment(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n        this.props.sendComment(this.props.postId, this.state.commentText)\n        this.setState({ commentText: \"\" })\n    }\n    render() {\n        return (\n            <div className=\"col-md-10 col-xs-6 col-xl-10 col-9\">\n                {this.renderCreatePost()}\n            </div>\n        )\n    }\n}","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport './listOfComments.scss'\nexport interface Comment {\n    id: string\n    userId: string\n    postId: string\n    text: string\n    createDate: Date\n    avatar: string\n    link: string\n}\ninterface IProps {\n    comments: Comment[]\n}\ninterface IState {\n}\n\nexport class ListOfComments extends React.PureComponent<IProps, IState> {\n    constructor(props: IProps) {\n        super(props)\n        this.state = {\n        }\n    }\n    showAll(id: string) {\n        const elementClass = document.getElementById(id)!.className\n        document.getElementById(id)!.className = elementClass == \"wall_post_text\" ? \"wall_post_text_cut\" : \"wall_post_text\"\n    }\n    renderText(text: string, id: string) {\n        if (text.length > 300) {\n            return (\n                <div>\n                    <div id={id} className=\"comment_post_text_cut\">{text}</div>\n                    <button className=\"btn btn-link\" onClick={() => this.showAll(id)}>Show all</button>\n                </div>\n            )\n        } else {\n            return (\n                <div className=\"comment_post_text\">{text}</div>\n            )\n        }\n    }\n    render() {\n        if (this.props.comments && this.props.comments.length != 0) {\n            return (\n                <div className=\"border-top border-bottom border-blue mb-1 comment_post_div\">\n                    {this.props.comments.map((data) => {\n                        let postDate = new Date(data.createDate)\n                        let date: string\n                        if (postDate.toLocaleDateString() == new Date().toLocaleDateString()) {\n                            date = postDate.toLocaleTimeString()\n                        } else {\n                            date = `${postDate.toLocaleDateString()} ${postDate.toLocaleTimeString()}`\n                        }\n                        return (\n                            <div key={data.id} className=\"comment_post_content mb-1\">\n                                <Link to={`/Profile/${data.link}`}>\n                                    <div className=\"comment_post_header\">\n                                        <img src={data.avatar} alt=\"\" width=\"30\" height=\"30\" className=\"img-avatar\" />\n                                        <div className=\"comment_post_header_info\">\n                                            <h5 className=\"comment_post_author\">{data.userId}</h5>\n                                            <div className=\"comment_post_date\">\n                                                {date}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </Link>\n                                <div>\n                                    {this.renderText(data.text, data.id)}\n                                </div>\n                            </div>\n                        )\n                    })}\n                </div>\n            )\n        } else {\n            return (\n                <div></div>\n            )\n        }\n    }\n}\n","import * as React from 'react';\nimport './image.scss'\n\ninterface IState {\n    link: string\n    background: JSX.Element\n}\ninterface ImgProps {\n    link: string\n    id: string\n}\n\nexport class Img extends React.PureComponent<ImgProps, IState> {\n    constructor(props: ImgProps) {\n        super(props)\n        this.state = {\n            link: '',\n            background: <div></div>\n        }\n    }\n    closeModalPicture() {\n        this.setState({\n            background:\n                <div></div>\n        })\n    }\n    renderModalPicture() {\n        this.setState({\n            background:\n                <div className=\"div_modal\">\n                    <img src={this.props.link} key={this.props.id} alt=\"\" className=\"image_modal\" />\n                    <div className=\"wrapper_btn\">\n                        <div className=\"close-button\" onClick={() => this.closeModalPicture()} >\n                            <div className=\"in\">\n                                <div className=\"close-button-block\"></div>\n                                <div className=\"close-button-block\"></div>\n                            </div>\n                            <div className=\"out\">\n                                <div className=\"close-button-block\"></div>\n                                <div className=\"close-button-block\"></div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n        })\n    }\n    render() {\n        return (\n            <div className=\"div_image mx-1\" id={this.props.id}>\n                {this.state.background}\n                <img onClick={() => this.renderModalPicture()} src={this.props.link} key={this.props.id} alt=\"\" className=\"image mb-1\" />\n            </div>\n        )\n    }\n}\n\n","import * as React from 'react';\nimport './btn.scss'\n\ninterface IProps {\n    postId: string\n    sendLike: (postId: string) => void\n    isLiked: boolean\n    likes: number\n}\ninterface IState {\n    isLiked: boolean\n}\n\nexport class LikeBtn extends React.PureComponent<IProps, IState> {\n    constructor(props: IProps) {\n        super(props)\n        this.state = {\n            isLiked: this.props.isLiked\n        }\n    }\n    sendLike(e: React.MouseEvent<HTMLLabelElement, MouseEvent>) {\n        this.props.sendLike(this.props.postId)\n    }\n    change(event: React.ChangeEvent<HTMLInputElement>) {\n        console.log(event.target.value)\n    }\n    render() {\n        return (\n            <div className=\"row\">\n                <input type=\"checkbox\" className=\"check\" id={this.props.postId} checked={this.props.isLiked} value={this.props.postId} onChange={this.change.bind(this)} />\n                <label htmlFor={this.props.postId} onClick={this.sendLike.bind(this)}>\n                    <svg id=\"heart-svg\" viewBox=\"467 392 58 57\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <g id=\"Group\" fill=\"none\" fillRule=\"evenodd\" transform=\"translate(467 392)\">\n                            <path d=\"M29.144 20.773c-.063-.13-4.227-8.67-11.44-2.59C7.63 28.795 28.94 43.256 29.143 43.394c.204-.138 21.513-14.6 11.44-25.213-7.214-6.08-11.377 2.46-11.44 2.59z\" id=\"heart\" fill=\"#AAB8C2\" />\n                            <circle id=\"main-circ\" fill=\"#E2264D\" opacity=\"0\" cx=\"29.5\" cy=\"29.5\" r=\"1.5\" />\n\n                            <g id=\"grp7\" opacity=\"0\" transform=\"translate(7 6)\">\n                                <circle id=\"oval1\" fill=\"#9CD8C3\" cx=\"2\" cy=\"6\" r=\"2\" />\n                                <circle id=\"oval2\" fill=\"#8CE8C3\" cx=\"5\" cy=\"2\" r=\"2\" />\n                            </g>\n\n                            <g id=\"grp6\" opacity=\"0\" transform=\"translate(0 28)\">\n                                <circle id=\"oval1\" fill=\"#CC8EF5\" cx=\"2\" cy=\"7\" r=\"2\" />\n                                <circle id=\"oval2\" fill=\"#91D2FA\" cx=\"3\" cy=\"2\" r=\"2\" />\n                            </g>\n\n                            <g id=\"grp3\" opacity=\"0\" transform=\"translate(52 28)\">\n                                <circle id=\"oval2\" fill=\"#9CD8C3\" cx=\"2\" cy=\"7\" r=\"2\" />\n                                <circle id=\"oval1\" fill=\"#8CE8C3\" cx=\"4\" cy=\"2\" r=\"2\" />\n                            </g>\n\n                            <g id=\"grp2\" opacity=\"0\" transform=\"translate(44 6)\">\n                                <circle id=\"oval2\" fill=\"#CC8EF5\" cx=\"5\" cy=\"6\" r=\"2\" />\n                                <circle id=\"oval1\" fill=\"#CC8EF5\" cx=\"2\" cy=\"2\" r=\"2\" />\n                            </g>\n\n                            <g id=\"grp5\" opacity=\"0\" transform=\"translate(14 50)\">\n                                <circle id=\"oval1\" fill=\"#91D2FA\" cx=\"6\" cy=\"5\" r=\"2\" />\n                                <circle id=\"oval2\" fill=\"#91D2FA\" cx=\"2\" cy=\"2\" r=\"2\" />\n                            </g>\n\n                            <g id=\"grp4\" opacity=\"0\" transform=\"translate(35 50)\">\n                                <circle id=\"oval1\" fill=\"#F48EA7\" cx=\"6\" cy=\"5\" r=\"2\" />\n                                <circle id=\"oval2\" fill=\"#F48EA7\" cx=\"2\" cy=\"2\" r=\"2\" />\n                            </g>\n\n                            <g id=\"grp1\" opacity=\"0\" transform=\"translate(24)\">\n                                <circle id=\"oval1\" fill=\"#9FC7FA\" cx=\"2.5\" cy=\"3\" r=\"2\" />\n                                <circle id=\"oval2\" fill=\"#9FC7FA\" cx=\"7.5\" cy=\"2\" r=\"2\" />\n                            </g>\n                        </g>\n                    </svg>\n                </label>\n                <div className=\"like_button_count\">{this.props.likes}</div>\n            </div>\n        )\n    }\n}\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { ApplicationState } from '../../store';\nimport * as CreatePostStore from '../../store/Posts/PostsStore'\nimport { CreateComment } from '../Comments/CreateComment';\nimport { ListOfComments } from '../Comments/ListOfComments';\nimport { Img } from '../Images/Image';\nimport { LikeBtn } from './LikeBtn';\n\ntype CreatePostProps =\n    CreatePostStore.PostsState &\n    typeof CreatePostStore.actionCreators &\n    RouteComponentProps<{}>;\n\ninterface IState {\n    postText: string\n    pictureLink: string[]\n}\n\nclass ListOfPosts extends React.PureComponent<CreatePostProps, IState> {\n    constructor(props: CreatePostProps) {\n        super(props)\n        this.state = {\n            postText: '',\n            pictureLink: []\n        }\n    }\n    componentDidMount() {\n        const location = window.location.pathname\n        if (location.includes('Profile')) {\n            this.props.requestPosts('Profile')\n        } else if (location.includes('Group')) {\n            this.props.requestPosts('Group')\n        } else if (location === '/') {\n            this.props.requestPosts('News')\n        }\n    }\n    showAll(id: string) {\n        const elementClass = document.getElementById(id)!.className\n        document.getElementById(id)!.className = elementClass == \"wall_post_text\" ? \"wall_post_text_cut\" : \"wall_post_text\"\n    }\n    renderText(text: string, id: string) {\n        if (text.length > 500) {\n            return (\n                <div>\n                    <div id={id} className=\"wall_post_text_cut\">{text}</div>\n                    <button className=\"btn btn-link\" onClick={() => this.showAll(id)}>Show all</button>\n                </div>\n            )\n        } else {\n            return (\n                <div className=\"wall_post_text pl-2\">{text}</div>\n            )\n        }\n    }\n    renderPosts() {\n        if (this.props.posts) {\n            return (\n                <div className=\"row justify-content-center\">\n                    <div className=\"px-1 col-12 col-lg-8 col-xl-8\">\n                        {this.props.posts.map(data => {\n                            let postDate = new Date(data.createDate)\n                            let date: string\n                            if (postDate.toLocaleDateString() == new Date().toLocaleDateString()) {\n                                date = postDate.toLocaleTimeString()\n                            } else {\n                                date = `${postDate.toLocaleDateString()} ${postDate.toLocaleTimeString()}`\n                            }\n                            return (\n                                <div key={data.id} className=\"post_content bg-white my-3 py-2 rounded shadow\">\n                                    <Link to={data.link}>\n                                        <div className=\"post_header pl-4\">\n                                            <img src={data.avatar} alt=\"\" width=\"50\" height=\"50\" className=\"img-avatar\" />\n                                            <div className=\"post_header_info\">\n                                                <h5 className=\"post_author\">{data.userId}</h5>\n                                                <div className=\"post_date\">\n                                                    {date}\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </Link>\n                                    <div className=\"mt-3 pl-3\">\n                                        {this.renderText(data.postText, data.id)}\n                                        <div className=\"row ml-1 my-2\">\n                                            {data.pictureLink.map((picture) => {\n                                                return (\n                                                    <Img link={picture.pictureLink} id={picture.id} key={picture.id}/>\n                                                )\n                                            })}\n                                        </div>\n                                        <ListOfComments comments={data.comments} />\n                                        <div className=\"row\">\n                                            <CreateComment postId={data.id} sendComment={this.props.sendComment} />\n                                            <LikeBtn likes={data.likes} postId={data.id}\n                                                isLiked={data.isLiked} sendLike={this.props.sendLike} />\n                                        </div>\n                                    </div>\n                                </div>\n                            )\n                        })}\n                    </div>\n                </div>\n            )\n        }\n    }\n    render() {\n        return (\n            <div>\n                {this.renderPosts()}\n            </div>\n        )\n    }\n}\n\nexport default connect(\n    (state: ApplicationState) => state.createPost,\n    CreatePostStore.actionCreators\n)(ListOfPosts as any);","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport ListOfPosts from './Posts/ListOfPosts';\n\ninterface IState {\n  isAuthenticated: boolean,\n  user: any\n}\n\nclass Home extends React.PureComponent<{}, IState> {\n  constructor(props: {}){\n    super(props)\n    this.state = {\n      isAuthenticated: false,\n      user: undefined\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <ListOfPosts />\n      </div>\n    )\n  }\n}\n\nexport default connect()(Home);\n","import React from 'react'\nimport { Component } from 'react'\nimport { Route, Redirect } from 'react-router-dom'\nimport { ApplicationPaths, QueryParameterNames } from './ApiAuthorizationConstants'\nimport authService from './AuthorizeService'\n\ninterface IProps {\n    path: string,\n    component: any\n}\ninterface IState {\n    ready: boolean,\n    authenticated: boolean\n}\n\nexport default class AuthorizeRoute extends Component<IProps, IState> {\n    _subscription : number | undefined\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            ready: false,\n            authenticated: false\n        };\n    }\n\n    componentDidMount() {\n        this._subscription = authService.subscribe(() => this.authenticationChanged());\n        this.populateAuthenticationState();\n    }\n\n    componentWillUnmount() {\n        authService.unsubscribe(this._subscription);\n    }\n\n    render() {\n        const { ready, authenticated } = this.state;\n        var link = document.createElement(\"a\");\n        link.href = this.props.path;\n        const returnUrl = `${link.protocol}//${link.host}${link.pathname}${link.search}${link.hash}`;\n        const redirectUrl = `/MyLogin`\n        if (!ready) {\n            return <div></div>;\n        } else {\n            const { component: Component, ...rest } = this.props;\n            return <Route {...rest}\n                render={(props) => {\n                    if (authenticated) {\n                        return <Component {...props} />\n                    } else {\n                        return <Redirect to={redirectUrl} />\n                    }\n                }} />\n        }\n    }\n\n    async populateAuthenticationState() {\n        const authenticated = await authService.isAuthenticated();\n        this.setState({ ready: true, authenticated });\n    }\n\n    async authenticationChanged() {\n        this.setState({ ready: false, authenticated: false });\n        await this.populateAuthenticationState();\n    }\n}\n","import React from 'react'\nimport { Component } from 'react';\nimport authService from './AuthorizeService';\nimport { AuthenticationResultStatus } from './AuthorizeService';\nimport { LoginActions, QueryParameterNames, ApplicationPaths } from './ApiAuthorizationConstants';\n\ninterface IProps {\n    action: string\n}\ninterface IState {\n    message: any\n}\n\nexport class Login extends Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            message: undefined\n        };\n    }\n\n    componentDidMount() {\n        const action = this.props.action;\n        \n        switch (action) {\n            case LoginActions.Login:\n                this.login(this.getReturnUrl(undefined));\n                break;\n            case LoginActions.LoginCallback:\n                this.processLoginCallback();\n                break;\n            case LoginActions.LoginFailed:\n                const params = new URLSearchParams(window.location.search);\n                const error = params.get(QueryParameterNames.Message);\n                this.setState({ message: error });\n                break;\n            case LoginActions.Profile:\n                this.redirectToProfile();\n                break;\n            case LoginActions.Register:\n                this.redirectToRegister();\n                break;\n            default:\n                throw new Error(`Invalid action '${action}'`);\n        }\n    }\n\n    render() {\n        const action = this.props.action;\n        const { message } = this.state;\n\n        if (!!message) {\n            return <div>{message}</div>\n        } else {\n            switch (action) {\n                case LoginActions.Login:\n                    return (<div>Processing login</div>);\n                case LoginActions.LoginCallback:\n                    return (<div>Processing login callback</div>);\n                case LoginActions.Profile:\n                case LoginActions.Register:\n                    return (<div></div>);\n                default:\n                    throw new Error(`Invalid action '${action}'`);\n            }\n        }\n    }\n\n    async login(returnUrl: string) {\n        const state = { returnUrl };\n        const result: any = await authService.signIn(state);\n        switch (result.status) {\n            case AuthenticationResultStatus.Redirect:\n                break;\n            case AuthenticationResultStatus.Success:\n                await this.navigateToReturnUrl(returnUrl);\n                break;\n            case AuthenticationResultStatus.Fail:\n                this.setState({ message: result.message });\n                break;\n            default:\n                throw new Error(`Invalid status result ${result.status}.`);\n        }\n    }\n\n    async processLoginCallback() {\n        const url = window.location.href;\n        const result: any = await authService.completeSignIn(url);\n        switch (result.status) {\n            case AuthenticationResultStatus.Redirect:\n                // There should not be any redirects as the only time completeSignIn finishes\n                // is when we are doing a redirect sign in flow.\n                throw new Error('Should not redirect.');\n            case AuthenticationResultStatus.Success:\n                await this.navigateToReturnUrl(this.getReturnUrl(result.state));\n                break;\n            case AuthenticationResultStatus.Fail:\n                this.setState({ message: result.message });\n                break;\n            default:\n                throw new Error(`Invalid authentication result status '${result.status}'.`);\n        }\n    }\n\n    getReturnUrl(state: any) {\n        const params = new URLSearchParams(window.location.search);\n        const fromQuery = params.get(QueryParameterNames.ReturnUrl);\n        if (fromQuery && !fromQuery.startsWith(`${window.location.origin}/`)) {\n            // This is an extra check to prevent open redirects.\n            throw new Error(\"Invalid return url. The return url needs to have the same origin as the current page.\")\n        }\n        return (state && state.returnUrl) || fromQuery || `${window.location.origin}/`;\n    }\n\n    redirectToRegister() {\n        this.redirectToApiAuthorizationPath(`${ApplicationPaths.IdentityRegisterPath}?${QueryParameterNames.ReturnUrl}=${encodeURI(ApplicationPaths.Login)}`);\n    }\n\n    redirectToProfile() {\n        this.redirectToApiAuthorizationPath(ApplicationPaths.IdentityManagePath);\n    }\n\n    redirectToApiAuthorizationPath(apiAuthorizationPath: any) {\n        const redirectUrl = `${window.location.origin}${apiAuthorizationPath}`;\n        // It's important that we do a replace here so that when the user hits the back arrow on the\n        // browser he gets sent back to where it was on the app instead of to an endpoint on this\n        // component.\n        window.location.replace(redirectUrl);\n    }\n\n    navigateToReturnUrl(returnUrl: string) {\n        // It's important that we do a replace here so that we remove the callback uri with the\n        // fragment containing the tokens from the browser history.\n        window.location.replace(returnUrl);\n    }\n}\n","import React from 'react'\nimport { Component } from 'react';\nimport authService from './AuthorizeService';\nimport { AuthenticationResultStatus } from './AuthorizeService';\nimport { QueryParameterNames, LogoutActions, ApplicationPaths } from './ApiAuthorizationConstants';\n\n\ninterface IProps {\n    action: any\n}\ninterface IState {\n    message: any,\n    isReady: boolean,\n    authenticated: boolean\n}\n// The main responsibility of this component is to handle the user's logout process.\n// This is the starting point for the logout process, which is usually initiated when a\n// user clicks on the logout button on the LoginMenu component.\nexport class Logout extends Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            message: undefined,\n            isReady: false,\n            authenticated: false\n        };\n    }\n\n    componentDidMount() {\n        const action = this.props.action;\n        switch (action) {\n            case LogoutActions.Logout:\n                if (!!window.history.state.state.local) {\n                    this.logout(this.getReturnUrl(undefined));\n                } else {\n                    // This prevents regular links to <app>/authentication/logout from triggering a logout\n                    this.setState({ isReady: true, message: \"The logout was not initiated from within the page.\" });\n                }\n                break;\n            case LogoutActions.LogoutCallback:\n                this.processLogoutCallback();\n                break;\n            case LogoutActions.LoggedOut:\n                this.setState({ isReady: true, message: \"You successfully logged out!\" });\n                break;\n            default:\n                throw new Error(`Invalid action '${action}'`);\n        }\n\n        this.populateAuthenticationState();\n    }\n\n    render() {\n        const { isReady, message } = this.state;\n        if (!isReady) {\n            return <div></div>\n        }\n        if (!!message) {\n            return (<div>{message}</div>);\n        } else {\n            const action = this.props.action;\n            switch (action) {\n                case LogoutActions.Logout:\n                    return (<div>Processing logout</div>);\n                case LogoutActions.LogoutCallback:\n                    return (<div>Processing logout callback</div>);\n                case LogoutActions.LoggedOut:\n                    return (<div>{message}</div>);\n                default:\n                    throw new Error(`Invalid action '${action}'`);\n            }\n        }\n    }\n\n    async logout(returnUrl: string) {\n        const state = { returnUrl };\n        const isauthenticated = await authService.isAuthenticated();\n        if (isauthenticated) {\n            const result: any = await authService.signOut(state);\n            switch (result.status) {\n                case AuthenticationResultStatus.Redirect:\n                    break;\n                case AuthenticationResultStatus.Success:\n                    await this.navigateToReturnUrl(returnUrl);\n                    break;\n                case AuthenticationResultStatus.Fail:\n                    this.setState({ message: result.message });\n                    break;\n                default:\n                    throw new Error(\"Invalid authentication result status.\");\n            }\n        } else {\n            this.setState({ message: \"You successfully logged out!\" });\n        }\n    }\n\n    async processLogoutCallback() {\n        const url = window.location.href;\n        const result: any = await authService.completeSignOut(url);\n        switch (result.status) {\n            case AuthenticationResultStatus.Redirect:\n                // There should not be any redirects as the only time completeAuthentication finishes\n                // is when we are doing a redirect sign in flow.\n                throw new Error('Should not redirect.');\n            case AuthenticationResultStatus.Success:\n                await this.navigateToReturnUrl(this.getReturnUrl(result.state));\n                break;\n            case AuthenticationResultStatus.Fail:\n                this.setState({ message: result.message });\n                break;\n            default:\n                throw new Error(\"Invalid authentication result status.\");\n        }\n    }\n\n    async populateAuthenticationState() {\n        const authenticated = await authService.isAuthenticated();\n        this.setState({ isReady: true, authenticated });\n    }\n\n    getReturnUrl(state: any) {\n        const params = new URLSearchParams(window.location.search);\n        const fromQuery = params.get(QueryParameterNames.ReturnUrl);\n        if (fromQuery && !fromQuery.startsWith(`${window.location.origin}/`)) {\n            // This is an extra check to prevent open redirects.\n            throw new Error(\"Invalid return url. The return url needs to have the same origin as the current page.\")\n        }\n        return (state && state.returnUrl) ||\n            fromQuery ||\n            `${window.location.origin}${ApplicationPaths.LoggedOut}`;\n    }\n\n    navigateToReturnUrl(returnUrl: string) {\n        return window.location.replace(returnUrl);\n    }\n}\n","import React, { Component, Fragment } from 'react';\nimport { Route } from 'react-router';\nimport { Login } from './Login'\nimport { Logout } from './Logout'\nimport { ApplicationPaths, LoginActions, LogoutActions } from './ApiAuthorizationConstants';\n\nexport default class ApiAuthorizationRoutes extends Component {\n\n  render () {\n    return(\n      <Fragment>\n          <Route path={ApplicationPaths.Login} render={() => loginAction(LoginActions.Login)} />\n          <Route path={ApplicationPaths.LoginFailed} render={() => loginAction(LoginActions.LoginFailed)} />\n          <Route path={ApplicationPaths.LoginCallback} render={() => loginAction(LoginActions.LoginCallback)} />\n          <Route path={ApplicationPaths.Profile} render={() => loginAction(LoginActions.Profile)} />\n          <Route path={ApplicationPaths.Register} render={() => loginAction(LoginActions.Register)} />\n          <Route path={ApplicationPaths.LogOut} render={() => logoutAction(LogoutActions.Logout)} />\n          <Route path={ApplicationPaths.LogOutCallback} render={() => logoutAction(LogoutActions.LogoutCallback)} />\n          <Route path={ApplicationPaths.LoggedOut} render={() => logoutAction(LogoutActions.LoggedOut)} />\n      </Fragment>);\n  }\n}\n\nfunction loginAction(name: string){\n    return (<Login action={name}></Login>);\n}\n\nfunction logoutAction(name: string) {\n    return (<Logout action={name}></Logout>);\n}\n","import React from 'react';\nimport * as LoginFormState from '../../store/api-auth/LoginForm';\nimport { RouteComponentProps } from 'react-router';\nimport { connect } from 'react-redux';\nimport { ApplicationState } from '../../store';\nimport './form.scss'\n\ntype LoginFormProps =\n    LoginFormState.LoginFormState &\n    typeof LoginFormState.actionCreators &\n    RouteComponentProps<{}>;\ninterface IState {\n    Email: string,\n    Password: string,\n    RememberMe: boolean,\n    message: any\n}\nclass LoginForm extends React.PureComponent<LoginFormProps, IState> {\n    constructor(props: LoginFormProps) {\n        super(props);\n        this.state = {\n            Email: '',\n            Password: '',\n            RememberMe: false,\n            message: undefined\n        };\n    }\n\n    public handleSubmit = async (e: React.FormEvent) => {\n        e.preventDefault();\n        this.props.request(this.state.Email, this.state.Password, true, 'Login');\n    };\n\n    handleChangeEmail(event: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({ Email: event.target.value });\n    }\n    handleChangePassword(event: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({ Password: event.target.value });\n    }\n\n    public render() {\n        return (\n            <div className=\"bg-white row col-md-6 col-xs-6 col-xl-4 col-12 justify-content-center mx-auto my-5 py-2 rounded shadow\">\n                <div className=\"auth__group field col-12 my-1\">\n                    <input type='email' className=\"auth__field\" value={this.state.Email} required\n                        onChange={this.handleChangeEmail.bind(this)} id='email' />\n                    <label htmlFor='Input.Email' className=\"auth__label\">Email</label>\n                </div>\n                <div className=\"auth__group field col-12 my-1\">\n                    <input type='password' value={this.state.Password} className=\"auth__field\" required\n                        onChange={this.handleChangePassword.bind(this)} id='password' />\n                    <label htmlFor='Input.Password' className=\"auth__label\">Password</label>\n                </div>\n                {this.props.isLoading}\n                <div className=\"auth_send col-12\" onClick={this.handleSubmit.bind(this)}>\n                    <span className=\"noselect\">Login</span>\n                    <div id=\"circle\"></div>\n                </div>\n                <p>{this.props.status}</p>\n                {this.props.isLoading}\n            </div>\n        )\n    }\n}\n\nexport default connect(\n    (state: ApplicationState) => state.loginForm,\n    LoginFormState.actionCreators\n)(LoginForm as any);","import * as React from 'react';\n\nexport const NotFound: React.FC<{}> = (props) => {\n    return (\n        <div>\n            Not Found\n        </div>\n    )\n}","import React from 'react';\nimport * as LoginFormState from '../../store/api-auth/LoginForm';\nimport { RouteComponentProps } from 'react-router';\nimport { connect } from 'react-redux';\nimport { ApplicationState } from '../../store';\nimport authService from '../api-authorization/AuthorizeService';\nimport './form.scss'\n\ntype LoginFormProps =\n    LoginFormState.LoginFormState &\n    typeof LoginFormState.actionCreators &\n    RouteComponentProps<{}>;\ninterface IState {\n    Email: string,\n    Password: string,\n    ConfirmPassword: string,\n    state: string\n}\nclass RegisterForm extends React.PureComponent<LoginFormProps, IState> {\n    constructor(props: LoginFormProps) {\n        super(props);\n        this.state = {\n            Email: '',\n            Password: '',\n            ConfirmPassword: '',\n            state: ''\n        };\n    }\n\n    public handleSubmit = async (e: React.FormEvent) => {\n        e.preventDefault();\n        const returnUrl = \"https://localhost:5001/\"\n        if (this.state.ConfirmPassword === this.state.Password) {\n            this.props.request(this.state.Email, this.state.Password, true, 'Register')\n            authService.signIn({ returnUrl: returnUrl })\n            window.location.replace(returnUrl)\n        }\n    };\n\n    handleChangeEmail(event: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({ Email: event.target.value });\n    }\n    handleChangePassword(event: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({ Password: event.target.value });\n    }\n    handleChangeConfirmPassword(event: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({ ConfirmPassword: event.target.value });\n    }\n\n    public render() {\n        return (\n            <div className=\"bg-white row col-md-6 col-xs-6 col-xl-4 col-12 justify-content-center mx-auto my-5 py-2 rounded shadow\">\n                <div className=\"auth__group field col-12 my-1\">\n                    <input type='email' className=\"auth__field\" value={this.state.Email} required\n                        onChange={this.handleChangeEmail.bind(this)} id='email' />\n                    <label htmlFor='Input.Email' className=\"auth__label\">Email</label>\n                </div>\n                <div className=\"auth__group field col-12 my-1\">\n                    <input type='password' value={this.state.Password} className=\"auth__field\" required\n                        onChange={this.handleChangePassword.bind(this)} id='password' />\n                    <label htmlFor='Input.Password' className=\"auth__label\">Password</label>\n                </div>\n                <div className=\"auth__group field col-12 my-1\">\n                    <input type='password' value={this.state.ConfirmPassword} className=\"auth__field\" required\n                        onChange={this.handleChangeConfirmPassword.bind(this)} id='Confirmpassword' />\n                    <label className=\"auth__label\">Confirm password</label>\n                </div>\n                <div className=\"auth_send col-12\" onClick={this.handleSubmit.bind(this)}>\n                    <span className=\"noselect\">Register</span>\n                    <div id=\"circle\"></div>\n                </div>\n                {this.props.isLoading}\n            </div>\n        )\n    }\n}\n\nexport default connect(\n    (state: ApplicationState) => state.loginForm,\n    LoginFormState.actionCreators\n)(RegisterForm as any);","import * as React from 'react';\n\nexport const ConfirmEmailSuccess: React.FC<{}> = (props) => {\n    return (\n        <div>\n            You successfully confirmed email. Please, log in.\n        </div>\n    )\n}\n\nexport const BadConfirmEmail: React.FC<{}> = (props) => {\n    return (\n        <div>\n            BadConfirmEmail\n        </div>\n    )\n}","import * as React from 'react';\nimport $ from \"jquery\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFileImage } from '@fortawesome/free-solid-svg-icons';\ninterface IProps {\n  onImageChange: any\n  id: string\n}\n\nexport class FileInput extends React.Component<IProps> {\n  fileInput: React.RefObject<HTMLInputElement>;\n  constructor(props: IProps) {\n    super(props);\n    this.fileInput = React.createRef();\n  }\n  componentDidMount() {\n    console.log(this.props.onImageChange )\n  }\n  handleSubmit(event: React.ChangeEvent<HTMLInputElement>) {\n    event.preventDefault();\n    this.upload(this.fileInput.current!.files![0])\n  }\n  upload(file: File) {\n    if (!file || !file.type.match(/image.*/)) return;\n    var fd = new FormData();\n    fd.append(\"image\", file);\n    fd.append(\"title\", \"stepa123\");\n    fd.append(\"client_secret\", \"bda650e874b80220bab96aa22c383a5e4581cead\");\n    var xhr = new XMLHttpRequest();\n    console.log('upload')\n    xhr.open(\"POST\", \"https://api.imgur.com/3/image\");\n    xhr.setRequestHeader('Authorization', 'Client-ID 1337b94d530e99b');\n    var that = this\n    console.log('upload')\n    xhr.onload = function () {\n      console.log('UPLODAD2')\n      that.props.onImageChange(JSON.parse(xhr.responseText).data.link)\n      $(\"#cartinka\").empty();\n      $(\"#cartinka\").append('<img class=\"img-thumbnail w-25 h-25\" alt=\"smaple image\" src=\"' + JSON.parse(xhr.responseText).data.link + '\" />');\n    };\n    console.log('UPLODAD1')\n    xhr.send(fd);\n  }\n\n\n  renderInput() {\n    return (\n      <div className=\"box\">\n        <input type=\"file\"  id={this.props.id} className=\"inputfile inputfile-1\" onChange={this.handleSubmit.bind(this)} ref={this.fileInput} />\n        <label htmlFor={this.props.id}>\n          <FontAwesomeIcon icon={faFileImage} />\n          <span className=\"text\">Choose file</span>\n          <div id=\"circle\"></div>\n        </label>\n      </div>\n    )\n  }\n  render() {\n    return (\n      <div>\n        {this.renderInput()}\n      </div>\n    );\n  }\n}\n\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps } from 'react-router';\nimport { ApplicationState } from '../../store';\nimport * as CreatePostStore from '../../store/Posts/PostsStore'\nimport { Img } from '../Images/Image';\nimport { FileInput } from '../Profile/FileInput';\nimport './createPost.scss'\n\ntype CreatePostProps =\n    CreatePostStore.PostsState &\n    typeof CreatePostStore.actionCreators &\n    RouteComponentProps<{}>;\n\ninterface IState {\n    postText: string\n    pictureLink: string[]\n}\n\nclass CreatePost extends React.PureComponent<CreatePostProps, IState> {\n    constructor(props: CreatePostProps) {\n        super(props)\n        this.state = {\n            postText: '',\n            pictureLink: []\n        }\n        this.handleInputChange = this.handleInputChange.bind(this)\n        this.handleInputFileChange = this.handleInputFileChange.bind(this)\n    }\n    componentDidMount() {\n        window.location.pathname.includes('Profile')\n            ? this.props.requestPosts('Profile') : this.props.requestPosts('Group')\n    }\n    handleInputFileChange(file: string) {\n        this.setState(prevState => ({\n            ...prevState,\n            pictureLink: [...prevState.pictureLink, file]\n        }))\n    }\n    handleInputChange(event: React.ChangeEvent<HTMLTextAreaElement>) {\n        this.setState({ postText: event.target.value });\n    }\n    renderCreatePost() {\n        if (window.location.pathname.includes('Profile')) {\n            if (this.props.user != null) {\n                return (\n                    this.props.user.isAuthor\n                        ?\n                        <div className=\"form__group_post field rounded shadow bg-white px-5\">\n                            <textarea className=\"form__field_post\" placeholder=\"Name\" name=\"name\" required\n                                onChange={this.handleInputChange} value={this.state.postText} />\n                            <label className=\"form__label_post\">Send post</label>\n                            <div className=\"d-flex\">\n                                <div className=\"btn_send_post\" onClick={this.sendPost.bind(this)}>\n                                    <span className=\"noselect\">Send</span>\n                                    <div id=\"circle\"></div>\n                                </div>\n                                <FileInput onImageChange={this.handleInputFileChange} id={'post'} key={\"post\"}/>\n                            </div>\n                            {this.state.pictureLink != []\n                                    ? this.state.pictureLink.map((data, index) => <Img link={data} id={index.toString()} />)\n                                    : <div></div>}\n                        </div>\n                        : <div></div>\n                )\n            }\n        } else {\n            if (this.props.group != null) {\n                return (\n                    true\n                        ?\n                        <div className=\"form__group_post field rounded shadow bg-white px-5\">\n                            <textarea className=\"form__field_post\" placeholder=\"Name\" name=\"name\" required\n                                onChange={this.handleInputChange} value={this.state.postText} />\n                            <label className=\"form__label_post\">Send post</label>\n                            <div className=\"d-flex\">\n                                <div className=\"btn_send_post\" onClick={this.sendPost.bind(this)}>\n                                    <span className=\"noselect\">Send</span>\n                                    <div id=\"circle\"></div>\n                                </div>\n                                <FileInput id={'post'} onImageChange={this.handleInputFileChange} />\n                            </div>\n                        </div>\n                        : <div></div>\n                )\n            }\n        }\n    }\n    sendPost(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n        if (window.location.pathname.includes('Profile')) {\n            this.props.sendPost(this.state.postText, this.state.pictureLink)\n            this.setState({\n                postText: '',\n                pictureLink: []\n            })\n        } else {\n            this.props.sendPost(this.state.postText, this.state.pictureLink, this.props.group!.id)\n            this.setState({\n                postText: '',\n                pictureLink: []\n            })\n        }\n    }\n    render() {\n        return (\n            <div>\n                {this.renderCreatePost()}\n            </div>\n        )\n    }\n}\n\nexport default connect(\n    (state: ApplicationState) => state.createPost,\n    CreatePostStore.actionCreators\n)(CreatePost as any);","import * as React from 'react';\nimport * as PhotoAlbumStore from '../../store/PhotoAlbum/PhotoAlbumStore';\nimport { RouteComponentProps } from 'react-router';\nimport { connect } from 'react-redux';\nimport { ApplicationState } from '../../store';\nimport { FileInput } from '../Profile/FileInput';\nimport { Img } from '../Images/Image';\n\ntype PhotoAlbumProps =\n    PhotoAlbumStore.PhotoAlbumSate &\n    typeof PhotoAlbumStore.actionCreators &\n    RouteComponentProps<{}>;\ninterface IState {\n    pictureLinks: string[]\n}\nclass PhotoAlbum extends React.PureComponent<PhotoAlbumProps, IState> {\n    constructor(props: PhotoAlbumProps) {\n        super(props)\n        this.state = {\n            pictureLinks: []\n        }\n        this.handleInputFileChange = this.handleInputFileChange.bind(this)\n    }\n    handleInputFileChange(file: string) {\n        console.log('PHOTO FILE: ', file)\n        this.setState(prevState => ({\n            ...prevState,\n            pictureLinks: [...prevState.pictureLinks, file]\n        }))\n    }\n    public componentDidMount() {\n        this.props.requestAlbum()\n    }\n    public renderAlbum() {\n        if (this.props.pictures != []) return (\n            <div>\n                {this.props.pictures.map((data, index) => {\n                    return (\n                        <div className=\"image_album my-2\" key={index}>\n                            <Img link={data.pictureLink} id={index.toString()} key={index} />\n                        </div>\n                    )\n                })}\n            </div>\n        )\n    }\n    renderStateAlbum() {\n        if (this.state.pictureLinks != []) return (\n            this.state.pictureLinks.map((data, index) => {\n                return (\n                    <div className=\"image_album p-3\" key={data}>\n                        <Img link={data} id={index.toString()} key={index} />\n                    </div>\n                )\n            })\n        )\n    }\n    addToAlbum(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n        this.props.addToAlbum(this.state.pictureLinks)\n        this.setState({ pictureLinks: [] })\n    }\n    renderCreatePost() {\n        return (\n            this.props.isAuthor\n                ? <div className=\"d-flex p-2\">\n                    <div className=\"btn_send_post\" id=\"photo\" onClick={this.addToAlbum.bind(this)}>\n                        <span className=\"noselect\">Add photo to album</span>\n                        <div id=\"circle\"></div>\n                    </div>\n                    <FileInput onImageChange={this.handleInputFileChange} id={\"photo\"} key={\"photo\"}/>\n                </div>\n                : <div></div>\n        )\n    }\n    public render() {\n        if (this.props.isAuthor || this.props.pictures != [])\n            return (\n                <div>\n                    {this.renderCreatePost()}\n                    {this.renderAlbum()}\n                    <div>\n                        {this.renderStateAlbum()}\n                    </div>\n                </div>\n            )\n        else\n            return (\n                <div></div>\n            )\n    }\n};\n\nexport default connect(\n    (state: ApplicationState) => state.photoAlbum,\n    PhotoAlbumStore.actionCreators\n)(PhotoAlbum as any);","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Friend } from '../../store/Friends/FriendsStore';\ninterface IProps {\n    listOfFrfiends: Friend[]\n}\n\nexport class ListOfFriends extends React.Component<IProps> {\n    render() {\n        return (\n            this.props.listOfFrfiends.map((data) => {\n                let name = data.firstName.length == 0 ? 'Name' : data.firstName\n                return (\n                    <div className=\"people_cell\" key={data.id}>\n                        <Link to={`/Profile/${data.id}`} >\n                            <img src={data.avatar} height=\"50\" width=\"50\" className=\"img-avatar\" alt=\"\"/>\n                            <div className=\"people_cell_name\">{name}</div>\n                        </Link>\n                    </div>\n                )\n            })\n        )\n    }\n}\n\n","import * as React from 'react';\nimport * as ProfileStore from '../../store/Profile/ProfileStore';\nimport { RouteComponentProps } from 'react-router';\nimport { connect } from 'react-redux';\nimport { ApplicationState } from '../../store';\nimport { Link } from 'react-router-dom';\nimport CreatePost from '../Posts/CreatePost';\nimport PhotoAlbum from '../PhotoAlbum/PhotoAlbum';\nimport ListOfPosts from '../Posts/ListOfPosts';\nimport './profile.scss'\nimport { Img } from '../Images/Image';\nimport { ListOfFriends } from './ListOfSubs';\n\ntype ProfileProps =\n    ProfileStore.ProfileState &\n    typeof ProfileStore.actionCreators &\n    RouteComponentProps<{ userId: string }>;\n\nclass Profile extends React.PureComponent<ProfileProps> {\n    public componentDidMount() {\n        this.ensureDataFetched()\n    }\n    public componentDidUpdate() {\n        if (this.props.user !== null && this.props.user!.id !== this.props.match.params.userId)\n            this.ensureDataFetched()\n    }\n    private ensureDataFetched() {\n        this.props.requestProfile(this.props.match.params.userId)\n        this.props.requestFriends(this.props.match.params.userId)\n    }\n    private renderUser() {\n        if (this.props.user !== null) {\n            return (\n                <div>\n                    <div className=\"row justify-content-center\">\n                        <div className=\"page_block rounded shadow bg-white py-2 mb-3 col-6 col-lg-4 col-xl-5 align-self-start ml-3\">\n                            <Img link={this.props.user.avatar} id={this.props.user.id} />\n                            {this.props.user.isAuthor\n                                ? <div className=\"text-center\">\n                                    <Link to=\"/EditProfile\">\n                                        <div className=\"btn_send_profile\">\n                                            <span className=\"noselect\">Edit Profile</span>\n                                            <div id=\"circle\"></div>\n                                        </div>\n                                    </Link>\n                                    <Link to=\"/CreateGroup\">\n                                        <div className=\"btn_send_profile\">\n                                            <span className=\"noselect\">CreateGroup</span>\n                                            <div id=\"circle\"></div>\n                                        </div>\n                                    </Link>\n                                </div>\n                                : <div className=\"text-center\">\n                                    <Link to={`/Dialog/${this.props.user.id}`}>\n                                        <div className=\"btn_send_profile\">\n                                            <span className=\"noselect\">Chat now!</span>\n                                            <div id=\"circle\"></div>\n                                        </div>\n                                    </Link>\n                                </div>}\n                        </div>\n                        <div className=\"col-6 col-lg-4 col-xl-5 div_info mb-5\">\n                            <div className=\"rounded shadow bg-white p-2\">\n                                <h5>{this.props.user.firstName} {this.props.user.secondName}</h5>\n                                <p>City: {this.props.user.city}</p>\n                                <p>Coutnry: {this.props.user.country}</p>\n                                <p>Date of birth: {this.props.user.dateOfBirth.toUTCString}</p>\n                                <p>Languages: {this.props.user.languages}</p>\n                                <p>Family status: {this.props.user.familyStatus}</p>\n                            </div>\n                            <div className=\"rounded shadow bg-white p-2 mt-3 subs\">\n                                <h5>Subscribers:</h5>\n                                <ListOfFriends listOfFrfiends={this.props.listOfFriends} />\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"row justify-content-center\">\n                        <div className=\"col-12 col-lg-8 col-xl-8 px-1 mb-3 bg-white rounded\">\n                            <PhotoAlbum />\n                        </div>\n                    </div>\n                    <div className=\"row justify-content-center\">\n                        <div className=\"col-12 col-lg-8 col-xl-8 px-1\">\n                            <CreatePost />\n                        </div>\n                    </div>\n                    <div>\n                        <ListOfPosts />\n                    </div>\n                </div >\n            )\n        } else {\n            return (\n                <div></div>\n            )\n        }\n    }\n    public render() {\n        return (\n            <React.Fragment>\n                {this.props.isLoading}\n                {this.renderUser()}\n            </React.Fragment>\n        );\n    }\n};\n\nexport default connect(\n    (state: ApplicationState) => state.profile,\n    ProfileStore.actionCreators\n)(Profile as any);","import * as React from 'react';\nimport * as EditProfileStore from '../../store/Profile/EditProfileStore';\nimport { RouteComponentProps } from 'react-router';\nimport { connect } from 'react-redux';\nimport { ApplicationState } from '../../store';\nimport { UserModel } from '../../store/Profile/ProfileStore';\nimport { FileInput } from './FileInput';\nimport '../api-auth/form.scss'\nimport { Img } from '../Images/Image';\n\ntype EditProfileProps =\n    EditProfileStore.EditProfileState &\n    typeof EditProfileStore.actionCreators &\n    RouteComponentProps<{}>;\n\nclass EditProfile extends React.PureComponent<EditProfileProps, { user: UserModel, isLoading: JSX.Element }> {\n    constructor(props: EditProfileProps) {\n        super(props);\n        this.state = {\n            user: this.props.user,\n            isLoading: <div></div>\n        };\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleInputFileChange = this.handleInputFileChange.bind(this);\n    }\n    public componentDidMount() {\n        this.props.getEditProfile()\n        this.setState({ user: this.props.user })\n    }\n    public handleSubmit = async (e: React.FormEvent) => {\n        e.preventDefault();\n        this.props.postEditProfile(this.state.user);\n    };\n    handleInputFileChange(file: string) {\n        console.log('FILE: ', file)\n        this.setState(({ user }) => ({\n            user: {\n                ...user,\n                avatar: file\n            }\n        }))\n    }\n    handleInputChange(event: React.ChangeEvent<HTMLInputElement>) {\n        const target = event.target;\n        const value: string = target.value;\n        let name: string = target.name;\n        this.setState(({ user }) => ({\n            user: {\n                ...user,\n                [name]: value\n            }\n        }))\n    }\n\n    public render() {\n        var date = new Date(this.state.user.dateOfBirth)\n        var values: string[] = [date.getDate().toString(), (date.getMonth() + 1).toString()];\n        for (var id in values) {\n            values[id] = values[id].toString().replace(/^([0-9])$/, '0$1');\n        }\n        return (\n            <React.Fragment>\n                <div className=\"bg-white row col-md-6 col-xs-6 col-xl-4 col-12 justify-content-center mx-auto my-5 py-2 rounded shadow\">\n                    <div className=\"auth__group field col-12 my-1\">\n                        <Img link={this.state.user.avatar} id=\"cartinka\" />\n                    </div>\n                    <div className=\"auth__group field col-12 my-1\">\n                        <label htmlFor='Input.FirstName' className=\"auth__label\">First Name</label>\n                        <input type='text' name=\"firstName\" value={this.state.user.firstName} className=\"auth__field\" required\n                            onChange={this.handleInputChange} />\n                    </div>\n                    <div className=\"auth__group field col-12 my-1\">\n                        <label htmlFor='Input.SecondName' className=\"auth__label\">Second Name</label>\n                        <input type='text' name=\"secondName\" value={this.state.user.secondName} className=\"auth__field\" required\n                            onChange={this.handleInputChange} />\n                    </div>\n                    <div className=\"auth__group field col-12 my-1\">\n                        <label htmlFor='Input.Country' className=\"auth__label\">Country</label>\n                        <input type='text' name=\"country\" value={this.state.user.country} className=\"auth__field\" required\n                            onChange={this.handleInputChange} />\n                    </div>\n                    <div className=\"auth__group field col-12 my-1\">\n                        <label htmlFor='Input.City' className=\"auth__label\">City</label>\n                        <input type='text' name=\"city\" value={this.state.user.city} className=\"auth__field\" required\n                            onChange={this.handleInputChange} />\n                    </div>\n                    <div className=\"auth__group field col-12 my-1\">\n                        <label htmlFor='Input.FamilyStatus' className=\"auth__label\">Family Status</label>\n                        <input type='text' name=\"familyStatus\" value={this.state.user.familyStatus} className=\"auth__field\" required\n                            onChange={this.handleInputChange} />\n                    </div>\n                    <div className=\"auth__group field col-12 my-1\">\n                        <label htmlFor='Input.Languages' className=\"auth__label\">Languages</label>\n                        <input type='text' name=\"languages\" value={this.state.user.languages} className=\"auth__field\" required\n                            onChange={this.handleInputChange} />\n                    </div>\n                    <FileInput id={\"edit\"} onImageChange={this.handleInputFileChange} />\n                    <div className=\"auth__group field col-12 my-1\">\n                        <label htmlFor='Input.DateOfBirth' className=\"auth__label\">Date Of Birth</label>\n                        <input type='date' name=\"dateOfBirth\"\n                            pattern=\"[0-9]{4}-[0-9]{2}-[0-9]{2}\"\n                            value={date.getFullYear() + '-' + values[1] + '-' + values[0]} className=\"auth__field\" required\n                            onChange={this.handleInputChange} />\n                    </div>\n                    {this.props.status}\n                    <div className=\"btn_send\" onClick={this.handleSubmit.bind(this)}>\n                        <span className=\"noselect\">Send</span>\n                        <div id=\"circle\"></div>\n                    </div>\n                    {this.state.isLoading}\n                </div>\n            </React.Fragment>\n        );\n    }\n};\n\nexport default connect(\n    (state: ApplicationState) => state.editProfile,\n    EditProfileStore.actionCreators\n)(EditProfile as any);","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Friend } from '../../store/Friends/FriendsStore';\nimport authService from '../api-authorization/AuthorizeService';\nimport './friends.scss'\ninterface IProps {\n    friend: Friend,\n    isFriend: boolean\n}\nclass PanelOfFriend extends React.PureComponent<IProps, { isFriend: boolean }> {\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            isFriend: this.props.isFriend\n        }\n    }\n    public componentDidMount() {\n    }\n    public renderButton() {\n        if (this.state.isFriend) {\n            return (\n                <div className=\"btn_send_friend link\" onClick={this.addDeleteFriend.bind(this)}>\n                    <span className=\"noselect\">Unsubscribe</span>\n                    <div id=\"circle\"></div>\n                </div>\n            )\n        } else {\n            return (\n                <div className=\"btn_send_friend link\" onClick={this.addDeleteFriend.bind(this)}>\n                    <span className=\"noselect\">Subscribe</span>\n                    <div id=\"circle\"></div>\n                </div>\n            )\n        }\n    }\n    public async addDeleteFriend() {\n        const token = await authService.getAccessToken();\n        fetch(`api/friends/addDeleteFriend?friendId=${this.props.friend.id}`, {\n            method: 'POST',\n            headers: !token ? {} : {\n                'Content-Type': 'application/json; charset=utf-8',\n                'Authorization': `Bearer ${token}`\n            },\n        })\n            .then(response => {\n                if (!response.ok) {\n                } else {\n                    this.setState({ isFriend: !this.state.isFriend })\n                }\n            })\n    }\n    public render() {\n        return (\n            <React.Fragment>\n                <div>\n                    <div className=\"post_content mx-sm-5\">\n                        <div className=\"post_header\">\n                            <img src={this.props.friend.avatar} alt=\"\" width=\"50\" height=\"50\" className=\"img-avatar\" />\n                            <div className=\"post_header_info\">\n                                <h5 className=\"post_author\">{`${this.props.friend.firstName} ${this.props.friend.secondName}`}</h5>\n                                <div className=\"post_date\">\n                                    {this.props.friend.dateOfBirth.toUTCString}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    {this.renderButton()}\n                    <div className=\"link\">\n                        <Link to={`/Profile/${this.props.friend.id}`}>\n                            <div className=\"btn_send_friend\">\n                                <span className=\"noselect\">Watch profile</span>\n                                <div id=\"circle\"></div>\n                            </div>\n                        </Link>\n                    </div>\n                    <div className=\"link mb-2\">\n                        <Link to={`/Dialog/${this.props.friend.id}`}>\n                            <div className=\"btn_send_friend\">\n                                <span className=\"noselect\">Chat now!</span>\n                                <div id=\"circle\"></div>\n                            </div>\n                        </Link>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n};\n\n\nexport default PanelOfFriend","import * as React from 'react';\nimport { RouteComponentProps } from 'react-router';\nimport { connect } from 'react-redux';\nimport { ApplicationState } from '../../store';\nimport * as FriendsStore from '../../store/Friends/FriendsStore'\nimport PanelOfFriend from './PanelOfFriend';\n\ntype FriendsProps =\nFriendsStore.FriendsState &\n    typeof FriendsStore.actionCreators &\n    RouteComponentProps<{}>;\n\nclass Friends extends React.PureComponent<FriendsProps> {\n    public componentDidMount() {\n        this.ensureDataFetched()\n    }\n    private ensureDataFetched() {\n        this.props.requestFriends()\n        this.props.requestNotFriends()\n    }\n    public renderListOfFriends() {\n        if (this.props.listOfFriends == []) {\n            return\n        } else {\n            return (\n                this.props.listOfFriends.map(data => <PanelOfFriend key={data.id} friend={data} isFriend={true}/>)\n            )\n        }\n    }\n    public renderListOfNotFriends() {\n        if (this.props.listOfNotFriends == []) {\n            return\n        } else {\n            return (\n                this.props.listOfNotFriends.map(data => <PanelOfFriend key={data.id} friend={data} isFriend={false}/>)\n            )\n        }\n    }\n    public render() {\n        return (\n            <React.Fragment>\n                <div className=\"bg-white\">\n                    <div className=\"border-bottom border-dark\">\n                        {this.renderListOfFriends()}\n                    </div>\n                    {this.renderListOfNotFriends()}\n                </div>\n            </React.Fragment>\n        );\n    }\n};\n\nexport default connect(\n    (state: ApplicationState) => state.friends,\n    FriendsStore.actionCreators\n)(Friends as any);","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { ApplicationState } from '../../store';\nimport * as DialogStore from '../../store/Dialogs/DialogStore'\nimport { RouteComponentProps } from 'react-router';\nimport './dialog.scss'\ntype DialogProps =\n    DialogStore.DialogState\n    & typeof DialogStore.actionCreators\n    & RouteComponentProps<{ toUserId: string }>;\ninterface IState {\n    toUserId: string\n    message: string\n}\nexport class Dialog extends React.PureComponent<DialogProps, IState> {\n    constructor(props: DialogProps) {\n        super(props);\n        this.state = {\n            toUserId: '',\n            message: ''\n        };\n        this.handleInputChange = this.handleInputChange.bind(this)\n    }\n    componentDidMount = async () => {\n        this.setState({ toUserId: this.props.match.params.toUserId })\n        this.props.requestDialog(this.props.match.params.toUserId)\n    }\n    handleInputChange(event: React.ChangeEvent<HTMLTextAreaElement>) {\n        this.setState({ message: event.target.value });\n    }\n    sendMessage(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n        this.props.sendMessage(this.state.toUserId, this.state.message)\n        this.setState({ message: '' });\n    }\n    componentDidUpdate() {\n        window.scrollTo(0, document.querySelector(\"#dialog\")!.scrollHeight)\n    }\n    render() {\n        return (\n            <div onLoad={() => window.scrollTo(0, document.querySelector(\"#dialog\")!.scrollHeight)} >\n                <div id=\"dialog\">\n                    {this.props.dialog.map(data => {\n                        let postDate = new Date(data.createDate)\n                        let date: string\n                        if (postDate.toLocaleDateString() == new Date().toLocaleDateString()) {\n                            date = postDate.toLocaleTimeString()\n                        } else {\n                            date = `${postDate.toLocaleDateString()} ${postDate.toLocaleTimeString()}`\n                        }\n                        let bg = ''\n                        if (data.isViewed == false) {\n                            bg = 'bg-secondary'\n                            if (data.withWhomId != this.props.withWhomId && data.withWhomId != undefined) this.props.recieveMessage(data)\n                        }\n                        return (\n                            <div key={data.id} id={data.id} className={`dialog_content_message mx-auto ${bg}`} onLoad={() => setTimeout(() => {\n                                if (document.getElementById(data.id) != null) document.getElementById(data.id)!.className = \"dialog_content_message mx-auto\"\n                            }, 5000)}>\n                                <div className=\"dialog_header\">\n                                    <img src={data.avatar} alt=\"\" width=\"50\" height=\"50\" className=\"img-avatar\" />\n                                    <div className=\"dialog_header_info\">\n                                        <h5 className=\"dialog_author\">{data.firstUserId}\n                                            <div className=\"dialog_date\">\n                                                {date}\n                                            </div>\n                                        </h5>\n                                        <div className=\"message_text \">\n                                            {data.message}\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        )\n                    })}\n                </div>\n                <div className=\"fixed-bottom form__group_post_message field rounded shadow bg-white px-2 row col-xl-5 col-lg-8 col-md-10 col-12 mx-auto mb-xl-5\">\n                    <div className=\"col-10 col-sm-9 col-md-9 pl-4\">\n                        <label className=\"form__label_post_message\">Send message</label>\n                        <textarea className=\"form__field_post_message\" placeholder=\"Name\" name=\"name\" required\n                            onChange={this.handleInputChange} value={this.state.message} />\n                    </div>\n                    <div className=\"col-1 my-auto\">\n                        <div className=\"btn_send_post\" onClick={this.sendMessage.bind(this)}>\n                            <span className=\"noselect\">Send</span>\n                            <div id=\"circle\"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default connect(\n    (state: ApplicationState) => state.dialog,\n    DialogStore.actionCreators\n)(Dialog as any);","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { User } from '../../store/Profile/ProfileStore';\nimport authService from '../api-authorization/AuthorizeService';\nimport './dialog.scss'\ninterface IProps {\n\n}\ninterface IState {\n    dialogs: UserDialog[]\n}\ninterface UserDialog extends User {\n    message: string\n    createDate: Date\n    count: number\n}\nexport class Dialogs extends React.PureComponent<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            dialogs: []\n        }\n    }\n    componentDidMount = async () => {\n        const token = await authService.getAccessToken();\n        fetch(`api/getDialogs`, {\n            headers: !token ? {} : { 'Authorization': `Bearer ${token}` }\n        })\n            .then(response => {\n                return response.ok ? response.json() as Promise<UserDialog[]> : []\n            })\n            .then(data => {\n                this.setState({ dialogs: data })\n            })\n    }\n    renderDialogs() {\n        if (this.state.dialogs != null)\n            return (\n                this.state.dialogs.map((data: UserDialog) => {\n                    let postDate = new Date(data.createDate)\n                    let date: string\n                    if (postDate.toLocaleDateString() == new Date().toLocaleDateString()) {\n                        date = postDate.toLocaleTimeString()\n                    } else {\n                        date = `${postDate.toLocaleDateString()} ${postDate.toLocaleTimeString()}`\n                    }\n                    let count: string | number = data.count != 0 ? data.count : ''\n                    return (\n                        <div key={data.id} className=\"dialog_content mx-auto\">\n                            <Link to={`/Dialog/${data.id}`}>\n                                <div className=\"dialog_header\">\n                                    <img src={data.avatar} alt=\"\" width=\"50\" height=\"50\" className=\"img-avatar\" />\n                                    <div className=\"dialog_header_info\">\n                                        <h5 className=\"dialog_author\">{`${data.firstName} ${data.secondName}`}\n                                            <div className=\"dialog_date\">\n                                                {date}\n                                            </div> </h5>\n                                        <div id={data.id} className=\"message\">\n                                            <span className=\"badge badge-pill badge-warning\">{count}</span>\n                                            {' '}{data.message}\n                                        </div>\n                                    </div>\n                                </div>\n                            </Link>\n                        </div>\n                    )\n                })\n            )\n    }\n    render() {\n        return (\n            <div className=\"mt-2 \">\n                {this.renderDialogs()}\n            </div>\n        )\n    }\n}","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps } from 'react-router';\nimport { ApplicationState } from '../../store';\nimport * as GroupStore from '../../store/Groups/GroupStore'\nimport { Group } from '../../store/Groups/GroupStore';\nimport { FileInput } from '../Profile/FileInput';\nimport '../api-auth/form.scss'\nimport { Img } from '../Images/Image';\n\ntype GroupeProps =\n    GroupStore.GroupState &\n    typeof GroupStore.actionCreators &\n    RouteComponentProps<{ id: string }>;\n\ninterface IState {\n    group: Group\n}\n\nclass CreateGroupe extends React.PureComponent<GroupeProps, IState> {\n    constructor(props: GroupeProps) {\n        super(props)\n        this.state = {\n            group: this.props.group\n        };\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleInputFileChange = this.handleInputFileChange.bind(this);\n    }\n    componentDidMount() {\n        if (this.props.match.params.id != null) this.props.getGroup(this.props.match.params.id)\n    }\n    handleInputFileChange(file: string) {\n        this.setState(({ group }) => ({\n            group: {\n                ...group,\n                avatarLink: file\n            }\n        }))\n    }\n    handleInputChange(event: React.ChangeEvent<HTMLInputElement>) {\n        const target = event.target;\n        const value: string = target.value;\n        let name: string = target.name;\n        this.setState(({ group }) => ({\n            group: {\n                ...group,\n                [name]: value\n            }\n        }))\n    }\n    handleSubmit = async (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        const group = {\n            avatarLink: this.state.group.avatarLink,\n            name: this.state.group.name,\n            description: this.state.group.description\n        }\n        if (window.location.pathname.includes('CreateGroup')) {\n            this.props.request(group, 'createGroup')\n            window.location.replace('ListOfGroups');\n        } else {\n            const editGroup = {\n                ...group,\n                id: this.props.group.id\n            }\n            this.props.request(editGroup, 'editMainInfoGroup')\n        }\n    }\n    renderForm() {\n        return (\n            <div className=\"bg-white row col-md-6 col-xs-6 col-xl-4 col-12 justify-content-center mx-auto my-5 py-2 rounded shadow\">\n                <div>\n                    <Img link={this.state.group.avatarLink} id=\"asd\"/>\n                </div>\n                <div className=\"auth__group field col-12 my-1\">\n                    <label className=\"auth__label\">Name</label>\n                    <input type='text' name=\"name\" value={this.state.group.name} className=\"auth__field\" required\n                        onChange={this.handleInputChange} />\n                </div>\n                <div className=\"auth__group field col-12 my-1\">\n                    <label className=\"auth__label\">Description</label>\n                    <input type='text' name=\"description\" value={this.state.group.description} className=\"auth__field\" required\n                        onChange={this.handleInputChange} />\n                </div>\n                <div className=\"col-12\">\n                    <FileInput id={\"group\"} onImageChange={this.handleInputFileChange} />\n                </div>\n                <div className=\"btn_send\" onClick={this.handleSubmit.bind(this)}>\n                    <span className=\"noselect\">Create</span>\n                    <div id=\"circle\"></div>\n                </div>\n            </div>\n        )\n    }\n    render() {\n        return (\n            <div>\n                {this.renderForm()}\n            </div>\n        )\n    }\n}\n\nexport default connect(\n    (state: ApplicationState) => state.group,\n    GroupStore.actionCreators\n)(CreateGroupe as any);","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { ApplicationState } from '../../store';\nimport * as GroupStore from '../../store/Groups/GroupStore'\n\ntype GroupeProps =\n    GroupStore.GroupState &\n    typeof GroupStore.actionCreators &\n    RouteComponentProps<{}>;\n\nclass ListOfSubscribers extends React.PureComponent<GroupeProps, {}> {\n    constructor(props: GroupeProps) {\n        super(props)\n    }\n    componentDidMount() {\n        this.props.getListOfSubscribers(this.props.group.id)\n    }\n    renderAdminList() {\n        return (\n            this.props.admins.map((data) => {\n                let name = data.firstName.length == 0 ? 'Name' : data.firstName\n                return (\n                    <div className=\"people_cell\" key={data.id}>\n                        <Link to={`/Profile/${data.id}`} >\n                            <img src={data.avatar} height=\"50\" width=\"50\" className=\"img-avatar\" alt=\"\" />\n                            <div className=\"people_cell_name\">{name}</div>\n                        </Link>\n                        {this.renderMakeAdminBtn('Unadmin', this.props.group.id, data.id)}\n                    </div>\n                )\n            })\n        )\n    }\n    renderUserList() {\n        return (\n            this.props.users.map((data) => {\n                let name = data.firstName.length == 0 ? 'Name' : data.firstName\n                return (\n                    <div className=\"people_cell\" key={data.id}>\n                        <Link to={`/Profile/${data.id}`} >\n                            <img src={data.avatar} height=\"50\" width=\"50\" className=\"img-avatar\" alt=\"\" />\n                            <div className=\"people_cell_name\">{name}</div>\n                        </Link>\n                        {this.renderMakeAdminBtn('Admin', this.props.group.id, data.id)}\n                    </div>\n                )\n            })\n        )\n    }\n    renderMakeAdminBtn(text: string, groupId: string, userId: string) {\n        if (this.props.isAuthor) {\n            return (\n                <div className=\"btn btn-primary btn-sm\" onClick={() => {\n                    this.props.request({\n                        groupId: groupId, userId: userId\n                    }, 'ChangeGroupAdmin')\n                    this.render()\n                }}>\n                    {text}\n                </div>\n            )\n        }\n    }\n    render() {\n        return (\n            <div>\n                <div className=\"row justify-content-center\">\n                    <div className=\"rounded shadow bg-white p-2 mt-3 subs col-12 col-lg-8 col-xl-8 px-1\" >\n                        <h5>Admins:</h5>\n                        {this.renderAdminList()}\n                    </div>\n                </div>\n                <div className=\"row justify-content-center\">\n                    <div className=\"rounded shadow bg-white p-2 mt-3 subs col-12 col-lg-8 col-xl-8 px-1 mb-3\" >\n                        <h5>Subscribers:</h5>\n                        {this.renderUserList()}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default connect(\n    (state: ApplicationState) => state.group,\n    GroupStore.actionCreators\n)(ListOfSubscribers as any);","import * as React from 'react';\nimport authService from '../api-authorization/AuthorizeService';\n\ninterface IProps {\n    groupId: string\n}\ninterface IState {\n    subscribed: boolean\n}\n\nexport class Subscribe extends React.PureComponent<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            subscribed: false\n        }\n    }\n    async componentDidMount() {\n        const token = await authService.getAccessToken();\n        fetch(`api/isSubscribed?groupId=${this.props.groupId}`, {\n            headers: !token ? {} : { 'Authorization': `Bearer ${token}` }\n        })\n            .then(response => {\n                if (response.ok) {\n                    return response.json()\n                }\n            })\n            .then((data) => {\n                this.setState((state) => ({\n                    ...state,\n                    subscribed: data\n                }))\n            })\n    }\n    async subscribe() {\n        const token = await authService.getAccessToken();\n        fetch(`api/subscribe?groupId=${this.props.groupId}`, {\n            headers: !token ? {} : { 'Authorization': `Bearer ${token}` }\n        })\n            .then(response => {\n                if (response.ok) {\n                    this.setState((state) => ({\n                        ...state,\n                        subscribed: !state.subscribed\n                    }))\n                }\n            })\n    }\n    render() {\n        return (\n            <div>\n                {this.state.subscribed\n                    ? <div className=\"btn_send_friend\" onClick={this.subscribe.bind(this)}>\n                        <span className=\"noselect\">Отписаться</span>\n                        <div id=\"circle\"></div>\n                    </div>\n                    : <div className=\"btn_send_friend\" onClick={this.subscribe.bind(this)}>\n                        <span className=\"noselect\">Подписаться</span>\n                        <div id=\"circle\"></div>\n                    </div>\n                }\n            </div>\n        )\n    }\n}","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { ApplicationState } from '../../store';\nimport * as GroupStore from '../../store/Groups/GroupStore'\nimport CreatePost from '../Posts/CreatePost';\nimport ListOfPosts from '../Posts/ListOfPosts';\nimport ListOfSubscribers from './ListOfSubscribers';\nimport { Subscribe } from './Subscribe';\nimport './group.scss'\n\ntype GroupeProps =\n    GroupStore.GroupState &\n    typeof GroupStore.actionCreators &\n    RouteComponentProps<{ id: string }>;\n\ninterface IState {\n\n}\n\nclass GetGroup extends React.PureComponent<GroupeProps, IState> {\n    constructor(props: GroupeProps) {\n        super(props)\n    }\n    componentDidMount() {\n        this.props.getGroup(this.props.match.params.id)\n    }\n    renderGroup() {\n        if (this.props.group.id != '') {\n            return (\n                <div>\n                    <div className=\"row justify-content-center\">\n                        <div key={this.props.group.id} className=\"bg-white col-12 col-lg-8 col-xl-8 px-1 border border-top border-bottom\">\n                            <div className=\"group_content\">\n                                <div className=\"group_header\">\n                                    <img src={this.props.group.avatarLink} alt=\"\" width=\"50\" height=\"50\" className=\"img-avatar\" />\n                                    <div className=\"group_header_info\">\n                                        <h5 className=\"group_author\">{this.props.group.name}\n                                            <div className=\"group_date absolute\">\n                                                <Subscribe groupId={this.props.group.id} />\n                                                {this.renderAuthView()}\n                                            </div>\n                                        </h5>\n                                        <p>{this.props.group.description}</p>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <ListOfSubscribers />\n                    { this.renderAdminView()}\n                    <ListOfPosts />\n                </div >\n            )\n        }\n    }\n    renderAuthView() {\n        if (this.props.isAuthor)\n            return (\n                <div>\n                    <Link to={`/EditGroup/${this.props.group.id}`}>\n                        <div className=\"d-flex\">\n                            <div className=\"btn_send_friend\">\n                                <span className=\"noselect\">Edit group</span>\n                                <div id=\"circle\"></div>\n                            </div>\n                        </div>\n                    </Link>\n                </div>\n            )\n    }\n    renderAdminView() {\n        if (this.props.isAdmin)\n            return (\n                <div className=\"row justify-content-center\">\n                    <div className=\"col-12 col-lg-8 col-xl-8 px-1\">\n                        <CreatePost />\n                    </div>\n                </div>\n            )\n    }\n    render() {\n        return (\n            <div>\n                {this.renderGroup()}\n            </div>\n        )\n    }\n}\n\nexport default connect(\n    (state: ApplicationState) => state.group,\n    GroupStore.actionCreators\n)(GetGroup as any);","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport authService from '../api-authorization/AuthorizeService';\nimport { Subscribe } from './Subscribe';\n\ninterface IState {\n    subGroups: any,\n    notSubGroups: any\n}\n\nexport class ListOfGroups extends React.PureComponent<{}, IState> {\n    constructor(props: {}) {\n        super(props);\n        this.state = {\n            subGroups: undefined,\n            notSubGroups: undefined\n        }\n    }\n    componentDidMount = async () => {\n        const token = await authService.getAccessToken();\n        fetch(`api/getListOfSubGroups`, {\n            headers: !token ? {} : { 'Authorization': `Bearer ${token}` }\n        })\n            .then(response => {\n                return response.ok ? response.json() as Promise<any> : { subGroups: [], notSubGroups: [] }\n            })\n            .then(data => {\n                this.setState({ subGroups: data.listOfSubGroups, notSubGroups: data.listOfNotSubGroups })\n            })\n    }\n    renderGroups(sub: boolean) {\n        if (this.state.subGroups != null || this.state.notSubGroups != null) {\n            let a: any\n            sub == true ? a = this.state.subGroups : a = this.state.notSubGroups\n            return (\n                a.map((data: any) => {\n                    return (\n                        <div key={data.id} className=\"bg-white col-12 border border-top border-bottom\">\n                            <div className=\"post_content mx-sm-5\">\n                                <div className=\"post_header\">\n                                    <img src={data.avatarLink} alt=\"\" width=\"50\" height=\"50\" className=\"img-avatar\" />\n                                    <div className=\"post_header_info\">\n                                        <h5 className=\"post_author\">{data.name}</h5>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"mt-3 ml-5\">\n                                <Subscribe groupId={data.id} />\n                            </div>\n                            <Link to={`/Group/${data.id}`}>\n                                <div className=\"btn_send_friend ml-5\">\n                                    <span className=\"noselect\">Go to group</span>\n                                    <div id=\"circle\"></div>\n                                </div>\n                            </Link>\n                        </div>\n                    )\n                })\n            )\n        }\n    }\n    render() {\n        return (\n            <div className=\"row justify-content-center\">\n                <div className=\"border-top border-bottom border-black col-8\">\n                    {this.renderGroups(true)}\n                </div>\n                <div className=\"border-top border-bottom  border-black col-8\">\n                    {this.renderGroups(false)}\n                </div>\n            </div>\n        )\n    }\n}","import * as React from 'react';\nimport { Route } from 'react-router';\nimport Layout from './components/Layout';\nimport Home from './components/Home';\nimport './custom.scss'\nimport AuthorizeRoute from './components/api-authorization/AuthorizeRoute';\nimport { ApplicationPaths } from './components/api-authorization/ApiAuthorizationConstants';\nimport ApiAuthorizationRoutes from './components/api-authorization/ApiAuthorizationRoutes';\nimport LoginForm from './components/api-auth/LoginForm';\nimport { NotFound } from './components/NotFound';\nimport RegisterForm from './components/api-auth/RegisterForm';\nimport { BadConfirmEmail, ConfirmEmailSuccess } from './components/api-auth/ConfirmEmail';\nimport Profile from './components/Profile/Profile';\nimport EditProfile from './components/Profile/EditProfile';\nimport Friends from './components/Friends/Friends';\nimport Dialog from './components/Chat/Dialog';\nimport { Dialogs } from './components/Chat/Dialogs';\nimport CreateGroup from './components/Groups/CreateGroup';\nimport GetGroup from './components/Groups/GetGroup';\nimport { ListOfGroups } from './components/Groups/ListOfGroups';\nimport { Img } from './components/Images/Image';\n\nexport default () => (\n    <Layout>\n        <Route exact path='/' component={Home} />\n        <Route path='/MyLogin' component={LoginForm} />\n        <Route path='/MyRegister' component={RegisterForm} />\n        <Route path={ApplicationPaths.ApiAuthorizationPrefix} component={ApiAuthorizationRoutes} />\n        <Route path='/notfound' component={NotFound} />\n        <Route path='/BadConfirmEmail' component={BadConfirmEmail} />\n        <Route path='/ConfirmEmailSuccess' component={ConfirmEmailSuccess} />\n        <Route path='/Dialog/:toUserId' component={Dialog} />\n        <Route path='/Profile/:userId' component={Profile} />\n        <Route path='/Dialogs' component={Dialogs} />\n        <AuthorizeRoute path='/EditProfile' component={EditProfile} />\n        <Route path='/Friends' component={Friends} />\n        <AuthorizeRoute path='/CreateGroup' component={CreateGroup} />\n        <AuthorizeRoute path='/EditGroup/:id' component={CreateGroup} />\n        <Route path='/Group/:id' component={GetGroup} />\n        <Route path='/ListOfGroups' component={ListOfGroups} />\n        <Route path='/Image/:id/:link' component={Img} />\n    </Layout>\n);\n","import 'bootstrap/dist/css/bootstrap.css';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { createBrowserHistory } from 'history';\nimport configureStore from './store/configureStore';\nimport App from './App';\nimport authService from './components/api-authorization/AuthorizeService';\nimport { signalRRegisterCommands } from './store/signalr/signal';\n\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href') as string;\nconst history = createBrowserHistory({ basename: baseUrl });\n\nasync function auth() {\n    const isAuthenticated = await authService.isAuthenticated()\n    const user = await authService.getUser()\n    if (isAuthenticated.valueOf()) signalRRegisterCommands(store)\n    if (isAuthenticated.valueOf()) {\n        store.dispatch({ type: 'GET_NUMBER_OF_UNREAD_DIALOGS', id: user.sub })\n    }\n}\nconst store = configureStore(history);\nauth()\n\nReactDOM.render(\n    <Provider store={store}>\n        <ConnectedRouter history={history}>\n            <App />\n        </ConnectedRouter>\n    </Provider>,\n    document.getElementById('root'))\n","import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport { History } from 'history';\nimport { ApplicationState, reducers } from './';\nimport { ping } from './signalr/signal';\n\nexport default function configureStore(history: History, initialState?: ApplicationState) {\n    const middleware = [\n        thunk,\n        routerMiddleware(history),\n        ping\n    ];\n\n    const rootReducer = combineReducers({\n        ...reducers,\n        router: connectRouter(history)\n    });\n\n    const enhancers = [];\n    const windowIfDefined = typeof window === 'undefined' ? null : window as any;\n    if (windowIfDefined && windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__) {\n        enhancers.push(windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__());\n    }\n    return createStore(\n        rootReducer,\n        initialState,\n        compose(applyMiddleware(...middleware), ...enhancers)\n    );\n}\n"],"sourceRoot":""}